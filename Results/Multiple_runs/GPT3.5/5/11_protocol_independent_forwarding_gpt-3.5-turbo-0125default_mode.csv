Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
78,What are some of the desired features in future SDN switches that motivate a programmable data plane? Select all that apply.,"a. Reducing energy consumption for custom packet processing.
b. Processing packets at higher rates.
c. A wider range of packet processing primitives.
d. Flexible match-action tables, such as the ability to compose multiple match-action tables in sequence or in parallel.
e. A configurable packet parser that is not tied to a specific header format.
",,"c,d,e","b,c,d,e",,"The desired features in future SDN switches that motivate a programmable data plane include processing packets at higher rates (b) to improve network performance, a wider range of packet processing primitives (c) to enable more sophisticated packet processing operations, flexible match-action tables (d) that allow composing multiple tables in sequence or parallel for complex packet processing, and a configurable packet parser (e) that is not limited to a specific header format, providing more flexibility in handling different packet types.",[],0,11_protocol_independent_forwarding,0.9,0.7501902727405649
79,Which of the following best describes protocol independence?,"a. The ability to configure a packet parser in hardware that is agnostic to (and not constrained by) the control protocol.
b. The ability to evolve an existing control protocol without breaking interoperability.
c. The ability to run a switch independently from the controller.
d. The ability to support multiple protocols running in parallel on the same hardware.
e. The ability to run a network with both legacy OpenFlow switches and switches that support custom packet processing.
",,a,a,,Protocol independence refers to the ability to configure a packet parser in hardware that is agnostic to (and not constrained by) the control protocol. This allows for flexibility in handling different types of protocols without being tied to a specific one.,[],1,11_protocol_independent_forwarding,0.9,0.935270048003689
81,Which of the following describe functions of the P4 parser? Select all that apply.,"a. Constructing a graph of dependencies between different logical tables.
b. Translating rules to physical tables.
c. Verifying that the description of packet parsing is consistent with the behavior of an existing hardware switch (e.g., a legacy OpenFlow switch).
d. Translating a packet processing specification to a state machine.
e. Mapping logical tables to underlying switch resources.
",,"c,d","a,c,d",,"The functions of the P4 parser include: a. Constructing a graph of dependencies between different logical tables, as it helps in understanding the relationships between different components. c. Verifying that the description of packet parsing is consistent with the behavior of an existing hardware switch, ensuring compatibility with existing infrastructure. d. Translating a packet processing specification to a state machine, which is essential for defining the behavior of the network elements.",['https://p4.org/p4/p4-overview/'],0,11_protocol_independent_forwarding,0.9,0.7649551999708788
82,"Which of the following best describe the relationship between a language like P4, an assembler like NetASM, and target programmable hardware (e.g., RMT)?","a. P4 is much more amenable to ""cost semantics"" (i.e., figuring out how much a particular operation would cost in terms of power or area) than NetASM.
NetASM and P4 are two examples of high-level programming languages; they are interchangeable.
b. P4 has verifiable semantics, whereas NetASM does not.
c. A language like P4 would ""compile"" to an assembly language like NetASM, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
d. A language like NetASM would ""compile"" to an assembly language like P4, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
",,c,"b,c",,"The correct options are b and c. P4 has verifiable semantics, which means the behavior of P4 programs can be formally verified, ensuring correctness and predictability. Additionally, a language like P4 would compile to an assembly language like NetASM, which would then specify a one-to-one relationship with resources on the target forwarding hardware.",['https://p4.org/p4/'],0,11_protocol_independent_forwarding,0.9,0.7538663212381534
83,Which of the folloiwing instruction types create state elements in NetASM? Select all that apply.,"a. JMP
b. DRP
c. LBL
d. MKT
e. MKR
",,"d,e",c,,"The instruction type 'LBL' creates state elements in NetASM. When a label (LBL) instruction is encountered, it creates a state element in NetASM.",['https://github.com/NetASM/NetASM'],0,11_protocol_independent_forwarding,0.9,0.7912377400906487
84,Which of the following are true about locally contained applications? Select all that apply.,"a. Locally contained applications can be implemented with regular OpenFlow instructions.
b. A MAC learning switch can be implemented as a locally contained application.
c. Locally contained applications forward packets more slowly than their stateless counterparts.
d. A locally contained application can implement SDN logic without ever requiring a packet to be sent to the controller.
e. Locally contained applications allow the hardware pipeline to make switch-local state modifications.
",,"b,d,e","b,d",,"Option b is correct because a MAC learning switch can indeed be implemented as a locally contained application. Option d is also true as a locally contained application can implement SDN logic without needing to send packets to the controller, thus enabling local decision-making.",[],0,11_protocol_independent_forwarding,0.9,0.8880348220931108
86,What are some examples of optimizations that a compiler could perform on NetASM instructions? Select all that apply.,"a. Preventing bufferbloat for real-time application traffic.
b. Forwarding packets for high-volume flows at higher rates.
c. Composing or decomposing tables to save either on table size or table width.
d. Only instantiating hardware resources (e.g., table entries) for flows that actually have nonzero traffic volume.
e. Reordering instructions so that subsequent tables need not be as large (e.g., not storing state for unmatched packets).
",,"c,d,e","c,d,e",,"The compiler can perform the following optimizations on NetASM instructions:
 c. Composing or decomposing tables to save either on table size or table width: This optimization helps in reducing the memory footprint and improving efficiency.
 d. Only instantiating hardware resources (e.g., table entries) for flows that actually have nonzero traffic volume: By instantiating resources only for active flows, the compiler can optimize resource utilization.
 e. Reordering instructions so that subsequent tables need not be as large (e.g., not storing state for unmatched packets): This optimization can help in reducing the size of tables and improving processing efficiency.",[],1,11_protocol_independent_forwarding,0.9,0.9956568646468931
