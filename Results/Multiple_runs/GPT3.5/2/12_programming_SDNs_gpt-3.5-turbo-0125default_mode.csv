Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","a,c,d",,"The reasons that make programming OpenFlow switches difficult include: 
- (a) An OpenFlow controller only sees events for packets that the switches do not know how to handle, which can lead to challenges in managing unknown scenarios. 
- (c) Networks often have switches from multiple hardware vendors, which can introduce interoperability issues and complexities in programming. 
- (d) OpenFlow switches control switches at a low level of abstraction, requiring detailed configuration and management, which can be complex.",[],0,12_programming_SDNs,0.9,0.618500820163455
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,d,e",,"a. Switches have limited room for flow table entries, so storing rules for all IP addresses in a prefix may not be feasible due to space constraints. d. As more IP addresses are added to the permitted list, the switch table grows, potentially affecting switch performance. e. Flow table entries in OpenFlow can only perform exact matches on IP addresses, which means expressing policies for groups of IP addresses would require multiple entries, leading to scalability issues.",['https://www.sciencedirect.com/science/article/pii/S2352864816301187'],0,12_programming_SDNs,0.9,0.9943397875847226
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e","c,e",,"Options c and e involve sequential composition. In option c, the first action is to block all traffic except port 80, followed by counting the number of packets that are blocked. In option e, the first action is to block all traffic except port 80, followed by counting the number of packets that are not blocked.",[],0,12_programming_SDNs,0.95,0.5232871524121738
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,"Options a and e involve examples of parallel composition. In option a, the load balancing is performed on traffic arriving from a specific prefix or destined to a specific port, which can be done in parallel. In option e, the traffic is load balanced across multiple destination IP addresses, indicating parallel processing.",[],0,12_programming_SDNs,0.9,0.9750934987774839
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,"The correct option is c. This rule first matches packets with source IP address 10.0.0.1 or 10.0.0.2 and then modifies the destination IP address to 1.2.3.4. The use of '+' in Pyretic represents logical OR, and '>>' represents logical AND in rule composition.",['https://frenetic-lang.github.io/pyretic/api.html'],1,12_programming_SDNs,0.9,0.8362270431951849
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,b,,"Option b is the correct choice. In Pyretic, the '>>' operator is used for sequencing, where the second rule will only be applied if the first rule matches. This option correctly matches the specified conditions for both source and destination IP addresses.",['https://github.com/frenetic-lang/pyretic/wiki/Tutorial:-Writing-a-Firewall-Policy'],1,12_programming_SDNs,0.9,0.825630774198334
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c",,Dynamic policy in Pyretic involves making decisions based on changing conditions or criteria. Option a is correct as checking traffic flows against a list of permitted and prohibited source IP addresses that may change over time requires a dynamic policy. Option c is also correct as assigning traffic flows to different destination IP addresses based on a round-robin load balancing policy is a dynamic decision that can change over time.,[],0,12_programming_SDNs,0.9,0.9999676667167319
