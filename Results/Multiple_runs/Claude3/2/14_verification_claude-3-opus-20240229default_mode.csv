Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
106,Which of the following are true about configuration verification? Select all that apply.,"a. Configuration verification can only detect errors after the configuration is installed on production routers.
b. Configuration verification cannot detect incorrect protocol behavior that may result from faulty hardware.
c. Verifying the correctness of network behavior based on configuration requires a model of protocol behavior.
d. Configuration verification requires a large-scale simulation of network protocols, complete with tests for different message orderings and timings.
e. Configuration verification cannot detect incorrect protocol behavior that may result from buggy software.
",,"b,c,e",c,,"Configuration verification requires a model of the expected protocol behavior in order to check if the configuration will produce the desired network behavior. It does not necessarily require large-scale simulations with message ordering and timing tests (d). Configuration verification can be done before installing configurations on production routers (a) to proactively catch errors. However, verification based solely on configuration cannot detect issues caused by faulty hardware (b) or buggy router software (e), as those are runtime problems not evident from the configuration itself.","['https://www.cs.cornell.edu/courses/cs5413/2022fa/notes/lecture18.pdf', 'https://www.usenix.org/conference/nsdi11/automated-network-testing-batfish']",0,14_verification,0.9,1
107,"Which of the following assertions could be verified with configuration verification (i.e., of a snapshot of router and switch configuration)? Select all that apply.","a. A route learned from one peer will not be readvertised to another peer.
b. The current settings of link weights will result in all routers being connected.
c. The configuration of route reflectors and clients ensures that any route learned from a neighboring AS will propagate to all routers in the topology.
d. There is no traffic pattern that would ever result in a stateful firewall dropping traffic.
e. Any time that an infection occurs, hosts are automatically quarantined.
",,"a,b,c","a,c",,"Configuration verification can check static properties based on a snapshot of network device configurations. It can verify that routes learned from one peer are not readvertised to another based on route filtering and BGP configuration (a). It can also verify that route reflector and client configuration will propagate routes from neighboring ASes to all routers based on the BGP topology (c). However, it cannot verify properties that depend on dynamic link states (b), all possible traffic patterns through a firewall (d), or infection events and quarantining which are not captured in static configs (e).","['https://www.cs.cornell.edu/courses/cs5413/2022fa/notes/verification.html', 'https://www.cisco.com/c/en/us/about/press/internet-protocol-journal/back-issues/table-contents-52/144-bgp.html']",0,14_verification,0.9,1
108,Which of the following are true about data-plane verification? Select all that apply.,"a. Data-plane verification techniques such as header-space analysis typically operate on a single ""snapshot"" of data-plane state.
b. Data plane verification can only operate on the forwarding table of a single router or switch; network-wide analysis is not possible.
c. Data-plane verification may detect errors that configuration analysis can miss in the cases of buggy control-plane software.
d. Data-plane verification requires accurate modeling of network protocols, including which bits are present in which part of the packet header.
e. Header-space analysis can only provide verification/analysis for specific packets; it cannot answer questions for general parts of flowspace.
",,"a,c","a,c,d",,"Data-plane verification techniques like header-space analysis typically operate on a snapshot of the data-plane state across the network (a). While configuration analysis can catch many errors, data-plane verification can detect issues caused by bugs in the control-plane software that may be missed by just analyzing configurations (c). Data-plane verification requires accurately modeling the network protocols and header fields to reason about packet processing (d). Header-space analysis is not limited to just specific packets - it can analyze general parts of the flowspace (e is incorrect). Data-plane verification is not limited to just a single device and can perform network-wide analysis (b is incorrect).","['Header Space Analysis: Static Checking for Networks, Kazemian et al., NSDI 2012', 'Software Defined Networking, Kreutz et al., Proceedings of the IEEE, 2015']",0,14_verification,0.95,1
109,Which of the following assertions could be verified with data plane verification? Select all that apply.,"a. The network will remain connected, given the failure of at most two links.
b. Two virtual network ""slices"" are not completely isolated: it is possible for traffic to travel from one slice to the other.
c. The configuration of the network's routing protocols will result in persistent oscillation (i.e., they will never settle on a stable set of routes).
d. The forwarding table state in the routers across the network will result in a forwarding loop.
e. The rules installed on the firewalls in the network ensure that only port 80 traffic can ever reach the web server from the rest of the Internet.
",,"b,d,e","b,d,e",,"Data plane verification focuses on the actual forwarding behavior of the network based on the installed forwarding rules and firewall policies. It can verify isolation between network slices (b), detect forwarding loops resulting from the forwarding table state (d), and confirm that firewall rules are correctly limiting traffic to specific ports like port 80 for a web server (e). In contrast, checking network connectivity under link failures (a) or routing protocol convergence (c) would fall under control plane verification, as they relate to the routing protocols and topology rather than the data plane forwarding.","['https://www.cs.cornell.edu/~jnfoster/papers/frenetic-icfp.pdf', 'https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final51.pdf', 'https://www.cs.princeton.edu/~jrex/papers/veriflow-nsdi13.pdf']",1,14_verification,0.9,1
110,Which of the following is true about Kinetic policies? Select all that apply.,"a. State transitions can be exogenous or endogenous.
b. Kinetic's NuSMV verifier can verify that the data plane will never have loops.
c. State transitions can occur based on timing (e.g., a timeout).
d. The Kinetic controller can only process external events from routers and switches.
e. Pyretic's composition operators can help prevent state explosion.
",,"a,c,e","a,c,e",,"Kinetic policies can have both exogenous state transitions triggered by external events, and endogenous transitions based on internal timers or counters (a, c). Pyretic's composition operators like parallel and sequential composition can help manage the complexity and potential state explosion in Kinetic policies (e). However, the Kinetic controller can process external events beyond just those from routers and switches (d is incorrect). Also, while Kinetic's NuSMV verifier is powerful, it cannot guarantee the complete absence of loops in the data plane under all circumstances (b is incorrect).","['https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-kim.pdf', 'https://dl.acm.org/doi/10.1145/2620728.2620749']",1,14_verification,0.85,1
112,"Which of the following NuSMV expressions encodes the statement ""It is always possible for the policy state to go to 'allow'.""","a. SPEC AG (!authenticated -> AX policy=allow)
b. None of the above.
c. SPEC A [ policy=allow U authenticated ]
d. SPEC AG (authenticated -> AX policy=allow)
e. SPEC AG (EF policy=allow)
",,e,e,,"The given statement can be translated as 'It is always (AG) possible (EF) for the policy state to go to 'allow''. This matches the NuSMV expression in option e: SPEC AG (EF policy=allow). It uses the AG (always globally) and EF (exists finally) temporal logic operators to specify that from any state, there should always exist a path to a state where policy equals 'allow'.","['Principles of Model Checking by Christel Baier and Joost-Pieter Katoen, which covers temporal logic operators used in model checking tools like NuSMV', 'NuSMV 2.6 User Manual, which documents the syntax and semantics of NuSMV expressions']",1,14_verification,0.95,1
