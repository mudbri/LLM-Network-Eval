Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
78,What are some of the desired features in future SDN switches that motivate a programmable data plane? Select all that apply.,"a. Reducing energy consumption for custom packet processing.
b. Processing packets at higher rates.
c. A wider range of packet processing primitives.
d. Flexible match-action tables, such as the ability to compose multiple match-action tables in sequence or in parallel.
e. A configurable packet parser that is not tied to a specific header format.
",,"c,d,e","b,c,d,e",,Some desired features in future SDN switches that motivate a programmable data plane include: b) processing packets at higher rates to handle increasing network speeds and traffic volumes; c) supporting a wider range of packet processing primitives beyond basic forwarding to enable advanced network functions; d) allowing flexible composition of match-action tables to support complex packet processing pipelines; and e) having a configurable packet parser not tied to specific header formats to handle new and custom protocols. Reducing energy consumption (a) is a general goal but not a key motivator for programmable data planes specifically.,"['Bosshart, P., et al. (2014). P4: Programming protocol-independent packet processors. ACM SIGCOMM Computer Communication Review, 44(3), 87-95.', 'Dang, H. T., et al. (2020). Whippersnapper: A P4 language benchmark suite. Proceedings of the Symposium on SDN Research, 95-101.']",0,11_protocol_independent_forwarding,0.95,1
79,Which of the following best describes protocol independence?,"a. The ability to configure a packet parser in hardware that is agnostic to (and not constrained by) the control protocol.
b. The ability to evolve an existing control protocol without breaking interoperability.
c. The ability to run a switch independently from the controller.
d. The ability to support multiple protocols running in parallel on the same hardware.
e. The ability to run a network with both legacy OpenFlow switches and switches that support custom packet processing.
",,a,a,,"Protocol independence refers to the ability to configure a packet parser in hardware that is agnostic to and not constrained by the control protocol used. This allows the data plane to evolve independently of the control plane protocol. The other options, while related to SDN concepts, do not directly define protocol independence.","['Software Defined Networks: A Comprehensive Approach by Paul Goransson, Chuck Black', 'https://www.opennetworking.org/sdn-definition/']",1,11_protocol_independent_forwarding,0.9,1
81,Which of the following describe functions of the P4 parser? Select all that apply.,"a. Constructing a graph of dependencies between different logical tables.
b. Translating rules to physical tables.
c. Verifying that the description of packet parsing is consistent with the behavior of an existing hardware switch (e.g., a legacy OpenFlow switch).
d. Translating a packet processing specification to a state machine.
e. Mapping logical tables to underlying switch resources.
",,"c,d",d,,"The P4 parser translates the packet processing specification defined in the P4 program into a state machine that extracts the required header fields from incoming packets. The other options describe functions of the P4 compiler, not the parser specifically. The compiler is responsible for mapping the logical tables and other constructs to the underlying switch hardware resources.","['https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.html#sec-parsing', 'https://opennetworking.org/wp-content/uploads/2020/12/P4_Tutorial.pdf']",0,11_protocol_independent_forwarding,0.9,1
82,"Which of the following best describe the relationship between a language like P4, an assembler like NetASM, and target programmable hardware (e.g., RMT)?","a. P4 is much more amenable to ""cost semantics"" (i.e., figuring out how much a particular operation would cost in terms of power or area) than NetASM.
NetASM and P4 are two examples of high-level programming languages; they are interchangeable.
b. P4 has verifiable semantics, whereas NetASM does not.
c. A language like P4 would ""compile"" to an assembly language like NetASM, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
d. A language like NetASM would ""compile"" to an assembly language like P4, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
",,c,c,,"P4 is a high-level language for programming the data plane of network devices. It provides an abstraction layer that allows developers to define packet processing behavior without worrying about the underlying hardware details. NetASM, on the other hand, is a lower-level assembly language that provides a more direct mapping to the hardware resources. In the relationship between P4, NetASM, and the target programmable hardware (e.g., RMT), P4 code would be compiled to NetASM, which would then specify a one-to-one relationship with the resources on the target forwarding hardware.","['https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.html', 'https://www.usenix.org/system/files/nsdi20-paper-laki.pdf', 'https://www.cs.princeton.edu/~jrex/papers/netasm16.pdf']",1,11_protocol_independent_forwarding,0.9,1
83,Which of the folloiwing instruction types create state elements in NetASM? Select all that apply.,"a. JMP
b. DRP
c. LBL
d. MKT
e. MKR
",,"d,e","d,e",,"In NetASM, the MKT (make table) and MKR (make register) instructions are used to create state elements. MKT creates a match-action table, while MKR creates a register. The other instructions - JMP (jump), DRP (drop packet), and LBL (label) - do not create state elements.","['NetASM-P4: A Unified Programming Language for Data and Control Planes, Sivaraman et al., 2016', 'NetASM: A Low-level Assembly Language for Packet Processing on Programmable Hardware, Shahbaz et al., 2019']",1,11_protocol_independent_forwarding,0.95,1
84,Which of the following are true about locally contained applications? Select all that apply.,"a. Locally contained applications can be implemented with regular OpenFlow instructions.
b. A MAC learning switch can be implemented as a locally contained application.
c. Locally contained applications forward packets more slowly than their stateless counterparts.
d. A locally contained application can implement SDN logic without ever requiring a packet to be sent to the controller.
e. Locally contained applications allow the hardware pipeline to make switch-local state modifications.
",,"b,d,e","b,d,e",,"Locally contained applications allow certain SDN logic to be implemented directly on the switch without involving the controller. A MAC learning switch (b) is a good example - it can learn MAC addresses and make forwarding decisions locally on the switch. This allows packets to be forwarded without being sent to the controller (d), making the process faster than stateless applications that rely on the controller for every decision. Locally contained applications achieve this by allowing the switch's hardware pipeline to make local state modifications (e), such as updating MAC address tables. However, they typically require extensions beyond standard OpenFlow instructions (a is false) to support the extra capabilities.","['https://www.opennetworking.org/wp-content/uploads/2013/02/openflow-switch-v1.3.4.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-openflow/', 'https://www.coursera.org/lecture/sdn/lesson-3-1-locally-contained-applications-and-state-Zt0Wh']",1,11_protocol_independent_forwarding,0.9,1
86,What are some examples of optimizations that a compiler could perform on NetASM instructions? Select all that apply.,"a. Preventing bufferbloat for real-time application traffic.
b. Forwarding packets for high-volume flows at higher rates.
c. Composing or decomposing tables to save either on table size or table width.
d. Only instantiating hardware resources (e.g., table entries) for flows that actually have nonzero traffic volume.
e. Reordering instructions so that subsequent tables need not be as large (e.g., not storing state for unmatched packets).
",,"c,d,e","c,d,e",,"A compiler for NetASM instructions could perform several optimizations to improve efficiency and resource utilization:c) Composing or decomposing tables can help optimize table size and width based on the specific requirements. This can save memory.  d) By only instantiating hardware resources like table entries for flows that actually have nonzero traffic, unnecessary resource allocation can be avoided.e) Reordering instructions strategically, such as not storing state for unmatched packets, can reduce the size requirement for subsequent tables.Choices a) and b) relate more to runtime packet processing behavior rather than compile-time instruction optimizations.","['https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-shahbaz.pdf', 'https://dl.acm.org/doi/abs/10.1145/3230543.3230555']",1,11_protocol_independent_forwarding,0.9,1
