Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
113,"Which are reasonable approaches for designing a fast, scalable, programmable data plane? Select all that apply.","a. Make hardware routers more programmable with custom OpenFlow chips.
b. Make software routers faster by reducing the need to copy packets from the kernel into user space.
c. Send all traffic through software switches running in user space.
d. Make software routers faster by distributing software routers across clusters.
e. Make software routers faster by amortizing packet-processing costs across batches of packets.
",,"a,b,d,e","b,d,e",,Making software routers faster can be achieved through several approaches:b) Reducing the need to copy packets from kernel to user space avoids expensive context switches and data copying. d) Distributing software routers across clusters allows load balancing and parallel processing of packets.e) Amortizing packet-processing costs across batches improves efficiency by reducing per-packet overhead.Making hardware routers more programmable with custom chips (a) or sending all traffic through user-space software switches (c) are less scalable approaches compared to optimizing software routers.,"['https://www.usenix.org/system/files/conference/nsdi17/nsdi17-firestone.pdf', 'https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Rizzo.pdf']",0,10_programmable_data_planes,0.8,1
114,What are functions that are commonly performed by a programmable data plane? Select all that apply.,"a. Performing deep packet inspection
b. Forwarding
c. Specifying access control policies
d. Shaping traffic
e. Computing routes
",,"a,b,d","a,b,d",,"A programmable data plane commonly performs functions like deep packet inspection to examine packet contents beyond headers, packet forwarding based on defined rules, and traffic shaping to control bandwidth usage. Access control policies are typically defined in the control plane and pushed down to the data plane for enforcement. Route computation is a control plane function to determine optimal paths, which are then installed in the data plane forwarding tables.","['https://www.juniper.net/documentation/us/en/software/junos/sdn/topics/concept/sdn-junos-overview.html', 'https://www.sdxcentral.com/networking/sdn/definitions/inside-sdn-architecture/', 'https://www.opennetworking.org/sdn-definition/']",1,10_programmable_data_planes,0.9,1
115,Which of the following functions might be performed by a Click element? Select all that apply.,"a. Reading a packet from a network device
b. Dropping packets
c. Counting packets
d. Classifying packets into different priority queues
e. Computing shortest paths routes between two routers
",,"a,b,c,d","a,b,c,d",,"A Click element in the context of Software Defined Networking can perform several packet processing functions. It can read packets from a network device (a), drop packets based on certain criteria (b), count packets for monitoring or statistics (c), and classify packets into different priority queues for QoS purposes (d). However, computing shortest path routes between routers (e) is typically done by the SDN controller or routing applications, not individual Click elements.","['https://www.sciencedirect.com/topics/computer-science/click-modular-router', 'https://www.researchgate.net/publication/220782534_The_Click_Modular_Router_Project']",1,10_programmable_data_planes,0.9,1
116,Which of the following are true about programmable data planes in Click? Select all that apply.,"a. Click elements cannot perform common data plane operations such as TTL decrement or checksum computations.
b. Data-plane processing in Click is limited to a fixed set of elements provided by the software.
c. Click elements can be composed to perform complex functions, such as the forwarding at an IP router.
d. Click configuration is a simplified version of Python.
e. Click elements can be composed to perform complex network-wide functions, such as shortest paths or BGP routing.
",,c,c,,"In Click, elements can be composed to perform complex data plane functions like IP routing. Elements in Click are not limited to a fixed set, and can perform common data plane operations like TTL decrement and checksum computations. Click configuration uses its own domain-specific language, not a simplified Python. While elements can be composed for complex node-level functions, Click itself does not provide network-wide functions like shortest path or BGP routing.","['Kohler, Eddie, et al. ""The Click modular router."" ACM Transactions on Computer Systems (TOCS) 18.3 (2000): 263-297.', 'https://github.com/kohler/click/wiki/Concepts']",1,10_programmable_data_planes,0.9,1
117,Why does a RouteBricks server assign one core per queue?,"a. Having multiple cores accessing the same queue would require each core to perform only one function in the packet processing pipeline, which is inefficient.
b. Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance.
c. Having multiple cores accessing the same queue might create the possibility that there is a queue that is not served by any cores.
d. Cores have heterogeneous performance, and packets are different sizes, so it makes sense to assign less powerful cores to queues that have smaller packets.
",,b,b,,"The correct answer is b. Having multiple cores access the same queue would require locking mechanisms to prevent concurrent memory accesses to the queue, which can significantly slow down packet forwarding performance. By assigning one core per queue, RouteBricks avoids the need for locking and allows each core to process packets from its assigned queue independently, maximizing performance.","['RouteBricks: Exploiting Parallelism to Scale Software Routers, Dobrescu et al., SOSP 2009', 'https://www.cs.princeton.edu/courses/archive/fall13/cos597E/papers/routebricks09.pdf']",1,10_programmable_data_planes,0.95,1
118,What are some tricks commonly employed in software to accelerate packet forwarding? Select all that apply.,"a. Ethernet GRE tunnels
b. Large packet buffers that hold multiple packets that can be read with a single read
c. Forwarding smaller packets before larger packets
d. Avoiding lookups on the software bridge between virtual interfaces and physical interfaces
e. Batch processing
",,"a,b,d,e","b,e",,"Two common techniques used to accelerate packet forwarding in software are:b) Using large packet buffers that can hold multiple packets. This allows multiple packets to be read with a single read operation, reducing the overhead of multiple smaller reads.  e) Batch processing packets. By processing a batch of packets together, various operations like lookups and modifications can be done more efficiently compared to processing each packet individually.The other options are not directly relevant to accelerating packet forwarding in software.","['Computer Networking: A Top-Down Approach, 7th Edition by Kurose and Ross', 'High Performance Packet Processing in Software by Gallenm√ºller et al., 2021 (https://ieeexplore.ieee.org/document/9488906)']",0,10_programmable_data_planes,0.9,1
119,What are some of the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design? Select all that apply.,"a. Current hardware makes it difficult to implement multiple match action stages, and to repurpose TCAM and SRAM across multiple match-action stages.
b. Current hardware cannot forward traffic at line rates.
c. The current OpenFlow protocol depends on the constraints of conventional switching chips.
d. Current hardware cannot support OpenFlow 1.0 match-action primitives.
e. Current hardware is difficult to repurpose in the field.
",,"a,c,e","a,c,e",,"Current OpenFlow hardware has several limitations that motivated the design of custom OpenFlow chips. Firstly, conventional hardware makes it difficult to implement multiple match-action stages and flexibly allocate TCAM and SRAM resources across those stages (a). The OpenFlow protocol itself is also constrained by the capabilities of existing switching chips (c). Finally, it is challenging to repurpose or reconfigure conventional switching hardware after deployment (e). While early OpenFlow hardware could support the match-action primitives of OpenFlow 1.0 (d) and forward traffic at line rate (b), the other limitations around flexibility and protocol evolution were the key drivers for custom silicon.","['McKeown, Nick, et al. ""OpenFlow: enabling innovation in campus networks."" ACM SIGCOMM Computer Communication Review 38.2 (2008): 69-74.', 'Bosshart, Pat, et al. ""P4: Programming protocol-independent packet processors."" ACM SIGCOMM Computer Communication Review 44.3 (2014): 87-95.']",1,10_programmable_data_planes,0.9,1
120,"Which of the following are motivations for SwitchBlade, which supports composition of pre-synthesized hardware data plane modules on an FPGA? Select all that apply.","a. Most data plane protocols involve composing only a limited number of data-plane actions.
b. Experimental data planes may need to operate in parallel with production data planes.
c. Programming in Verilog is difficult.
d. FPGAs are lower-cost and consume less power than conventional ASICs or OpenFlow switching chips.
e. Programming in C is difficult.
",,"a,b,c","a,b",,"The key motivations for SwitchBlade are:a) Most data plane protocols can be composed from a limited set of fundamental data-plane actions. This allows pre-synthesizing common modules to speed up development.  b) Experimental data planes often need to run in parallel with production data planes on the same switch. SwitchBlade enables this by composing modules on an FPGA separate from the production hardware.The other options are not mentioned as direct motivations for SwitchBlade. While FPGAs may have cost/power benefits and Verilog programming is complex, these are not the primary drivers called out for the SwitchBlade architecture.","['SwitchBlade: A Platform for Rapid Deployment of Network Protocols on Programmable Hardware, Anwer et al., SIGCOMM 2010', 'https://www.cs.princeton.edu/~jrex/papers/switchblade10.pdf']",0,10_programmable_data_planes,0.9,1
