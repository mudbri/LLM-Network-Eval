Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
43,Which of the following statements are true about the OpenFlow specification? Select all that apply.,"a. If a switch does not contain a flow table entry that matches a particular packet, the switch forwards the packet to the controller for handling.
b. The main purpose of the OpenFlow control channel is to update flow table entries on switches.
c. The OpenFlow specification provides mechanisms to perform Layer 2 learning across a network of switches.
d. Once a switch has sent one packet for a flow, it must also send all subsequent packets for that flow to the controller.
e. Some versions of the OpenFlow specification allow for performing more than one action on a single packet.
",,"a,b,e","a,b,e",,"The correct statements about the OpenFlow specification are: a) If a switch does not have a matching flow table entry for a packet, it sends the packet to the controller to determine how to handle it. b) The main purpose of the OpenFlow control channel is indeed to allow the controller to update flow table entries on the switches. e) Later versions of OpenFlow (1.1+) introduced support for multiple actions to be applied to a single packet. Statement c is incorrect because Layer 2 learning is not a feature provided by the OpenFlow spec itself. Statement d is false; after sending the first packet of a new flow to the controller, the controller can install a flow entry so subsequent packets are handled by the switch without involving the controller.","['OpenFlow Switch Specification Version 1.5.1, Open Networking Foundation, https://opennetworking.org/wp-content/uploads/2014/10/openflow-switch-v1.5.1.pdf', 'Software Defined Networking (SDN): Anatomy of OpenFlow â€“ Part I, David Mahler, https://www.networkcomputing.com/networking/software-defined-networking-sdn-anatomy-openflow-part-i']",1,6_control_plane,0.95,1
44,Which of the following statements are true about dpctl? Select all that apply.,"a. dpctl is invoked from within the Mininet emulator.
b. dpctl can modify flow table entries on an OpenFlow switch.
c. dpctl can respond to network events, such as packets sent from a switch.
d. dpctl is an OpenFlow controller.
e. dpctl can inspect flow table entries on an OpenFlow switch.
",,"b,e","b,e",,"dpctl is a command line utility that allows interaction with OpenFlow switches. It can be used to inspect and modify flow table entries on an OpenFlow switch, which matches options b and e. However, dpctl is not invoked from within Mininet (a), does not respond to network events (c), and is not an OpenFlow controller itself (d).","['https://github.com/CPqD/ofsoftswitch13/wiki/Dpctl-Documentation', 'https://www.openvswitch.org/support/dist-docs/ovs-ofctl.8.txt']",1,6_control_plane,0.95,1
45,Which of the following are reasonable considerations for the choice of controller? Select all that apply.,"a. Performance of the programming language that the controller is implemented in.
b. Support for and integration with cloud applications.
c. Ease of learning curve.
d. Need for production-quality operation.
e. Speed of prototyping.
",,"a,b,c,d,e","a,b,d",,"When choosing an SDN controller, performance of the programming language (a) is important to ensure the controller can handle the scale and demands of the network. Support for integration with cloud applications (b) is also key as many networks today span on-premises and cloud environments. The need for production-quality operation (d) is critical for any controller being used to manage a live network. While ease of learning curve (c) and speed of prototyping (e) are nice to have, they are less critical considerations compared to performance, cloud integration, and production-readiness when it comes to choosing a controller for operational use.","['https://www.opennetworking.org/sdn-definition/', 'https://www.sdxcentral.com/networking/sdn/definitions/sdn-controllers/', 'https://www.networkworld.com/article/3209131/what-are-the-key-criteria-for-choosing-an-sdn-controller.html']",0,6_control_plane,0.9,1
46,Which of the following controllers support OpenStack integration? Select all that apply.,"a. NOX
b. Pox
c. CpQD
d. Floodlight
e. Ryu
",,"d,e","d,e",,Both Floodlight and Ryu controllers support integration with OpenStack. Floodlight has a native OpenStack plugin that allows it to work with OpenStack Neutron for network management. Ryu also provides a Neutron plugin and is well-integrated with OpenStack components.,"['https://floodlight.atlassian.net/wiki/spaces/floodlightcontroller/pages/1343544/OpenStack+Quantum+Plugin', 'https://ryu-sdn.org/architecture.html', 'https://docs.openstack.org/newton/networking-guide/config-sdn-controller.html']",1,6_control_plane,0.9,1
47,Which of the following are true about Pox? Select all that apply.,"a. Pox automatically determines the order to install flow table rules, to avoid inconsistent forwarding behavior.
b. Pox's _handle_PacketIn function determines how a packet should be handled when it arrives at the controller.
c. Pox provides a function to modify flow table entries at a switch.
d. Pox's performance is typically slower than NOX.
e. Pox automatically determines the priority between two conflicting rules.
",,"b,c,d","b,c,d",,"Pox's _handle_PacketIn function is called when a packet arrives at the controller and determines how it should be handled (b). Pox provides an ofp_flow_mod function to modify flow table entries at a switch (c). Pox is typically slower than NOX in terms of performance (d). However, Pox does not automatically determine the order to install flow table rules (a) or the priority between conflicting rules (e) - this needs to be handled by the controller application.","['https://openflow.stanford.edu/display/ONL/POX+Wiki', 'https://noxrepo.github.io/pox-doc/html/#id1', 'https://en.wikipedia.org/wiki/POX_(networking_software)']",1,6_control_plane,0.9,1
48,What is the difference between a hard timeout and an idle timeout?,"a. A hard timeout occurs exactly at the specified interval, whereas an idle timeout may occur slightly later than the specified interval.
b. A hard timeout expunges a flow table entry regardless of whether there have been active matches, whereas an idle timeout expunges the flow table entry only if there have been no matches for that flow within the specified interval.
c. A hard timeout expunges all flow table entry from the switch, whereas an idle timeout only expunges one flow at a time.
d. A hard timeout expunges a flow table entry for all switches in the network, whereas an idle timeout only expunges the flow table entry on the switches that have seen no matches for that flow within the specified interval.
",,b,b,,"The key difference between a hard timeout and an idle timeout is that a hard timeout expunges a flow table entry after the specified time interval regardless of whether there have been active matches for that flow. In contrast, an idle timeout only expunges the flow table entry if there have been no matches for that particular flow within the specified time interval. So the hard timeout is based purely on the elapsed time, while the idle timeout also considers the activity (or lack thereof) for the specific flow.","['OpenFlow Switch Specification, Version 1.5.1, Open Networking Foundation, https://opennetworking.org/wp-content/uploads/2014/10/openflow-switch-v1.5.1.pdf', 'Software Defined Networking (SDN): Anatomy of OpenFlow, Volume I, Fei Hu, https://books.google.com/books?id=0TvPBQAAQBAJ&pg=PA50']",1,6_control_plane,0.95,1
49,Which of the following are true about hubs and learning switches? Select all that apply,"a. A hub implemented in Pox requires all incoming packets to be directed to the controller.
b. A learning switch requires more logic at the controller (in terms of lines of code in Pox) than a hub.
c. A learning switch implemented in Pox can be easily extended to support firewall capabilities.
d. A learning switch implemented in Pox requires all incoming packets to be redirected to the controller.
e. A hub forwards an incoming packet on all ports (except the incoming port), whereas a switch only floods an incoming packet on all ports if it does not have a table entry that determines the output port for that packet.
",,"b,c,e","c,e",,"A learning switch can be extended to support firewall capabilities by adding logic at the controller to filter packets based on predefined rules. A hub floods incoming packets on all ports except the incoming port, while a learning switch only floods if it doesn't have a matching entry in its forwarding table that specifies the output port for that packet. A hub in Pox does not require sending all packets to the controller. A learning switch requires more controller logic than a hub to learn MAC addresses and populate the switch's forwarding table, but it does not need to send all packets to the controller once the forwarding table is built.","['https://github.com/mininet/pox/blob/master/pox/forwarding/l2_learning.py', 'https://github.com/mininet/pox/blob/master/pox/forwarding/hub.py', 'https://en.wikipedia.org/wiki/Network_switch#Layer_2', 'https://en.wikipedia.org/wiki/Ethernet_hub']",0,6_control_plane,0.9,1
50,Which of the following functions ensures that the controller will hear PacketIn messages? Select all that apply.,"a. connection.addListeners
b. _handle_PacketIn
c. AddRule
d. init
e. launch
",,a,"a,b",,"The 'connection.addListeners' function is used to register event listeners with the controller, including the listener for PacketIn messages. The '_handle_PacketIn' function is the actual event handler that gets called when a PacketIn message is received by the controller. The other choices - AddRule, init, and launch - are not directly related to ensuring the controller hears PacketIn messages.","['https://github.com/mininet/openflow-tutorial/wiki/Create-a-Learning-Switch', 'https://noxrepo.github.io/pox-doc/html/#creating-a-learning-switch']",0,6_control_plane,0.9,1
51,What are the two key steps of an OpenFlow flow table entry (select two)?,"a. match
b. action
c. redirect
d. drop
e. forward
",,"a,b","a,b",,"The two key steps of an OpenFlow flow table entry are match and action. The match step determines if an incoming packet matches the criteria specified in the flow entry. If there is a match, the action step defines what should be done with the matched packet, such as forwarding, dropping, or redirecting it.","['OpenFlow Switch Specification Version 1.5.1, Open Networking Foundation, https://opennetworking.org/wp-content/uploads/2014/10/openflow-switch-v1.5.1.pdf', 'Software Defined Networking (SDN): Anatomy of OpenFlow Volume I, Fei Hu, Qi Hao, Ke Bao, https://www.sciencedirect.com/science/article/abs/pii/S1389128613003733']",1,6_control_plane,0.95,1
52,Which of the following are true about the OpenDaylight controller? Select all that apply.,"a. It allows dynamic reloading of controller functionality without restarting the controller.
b. It only supports OpenFlow as a ""southbound"" control framework.
c. Its code shares a lot of similarities with Beacon.
d. Open Daylight only supports proprietary switches from Cisco and IBM.
e. It is slower and less scalable than some of the more lightweight SDN controllers such as Pox.
",,"a,c","a,c",,"The OpenDaylight controller allows dynamic reloading of controller functionality without requiring a restart, which is an advantage for maintaining network uptime. Its codebase also shares similarities with the Beacon controller. However, OpenDaylight supports multiple southbound protocols beyond just OpenFlow, and it is designed to work with a variety of switches from different vendors, not just Cisco and IBM. As a full-featured controller, it may be less lightweight than simpler controllers like Pox, but it is still designed for performance and scalability in production environments.","['https://www.opendaylight.org/what-we-do/odl-platform-overview', 'https://www.sdxcentral.com/networking/sdn/definitions/opendaylight-controller/', 'Kreutz, D., Ramos, F., Verissimo, P., Rothenberg, C. E., Azodolmolky, S., & Uhlig, S. (2015). Software-defined networking: A comprehensive survey. Proceedings of the IEEE, 103(1), 14-76.']",1,6_control_plane,0.9,1
