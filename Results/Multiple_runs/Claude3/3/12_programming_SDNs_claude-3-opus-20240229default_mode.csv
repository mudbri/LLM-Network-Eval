Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","c,e",,"Programming OpenFlow switches can be difficult for a couple reasons:c) Networks often have switches from multiple hardware vendors, which means the controller needs to handle differences between switch implementations. e) Network policies involve many independent tasks that may have conflicting behaviors, making it challenging to implement consistent network-wide policies.While an OpenFlow controller only sees certain events the switches can't handle (a) and controls switches at a low level (d), these don't necessarily make programming more difficult. And OpenFlow doesn't require a single centralized controller (b).","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.3.1.pdf', 'https://www.sciencedirect.com/science/article/pii/S1389128613001722']",0,12_programming_SDNs,0.8,1
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,d,e",,"Expressing a policy to allow traffic from a specific IP prefix while dropping all other traffic can be problematic with OpenFlow rules for several reasons: a) Switches have limited flow table space and cannot store rules for all individual IP addresses in a prefix by default.  d) As more permitted IP addresses are added, the growing number of entries can degrade switch performance. e) Flow table entries only support exact IP address matches, so allowing a group of IPs requires many flow table entries. Issues b and c are not directly relevant, as the controller should only need to see the first packet of each flow, and rule installation order does not inherently cause traffic to be dropped.","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.0.0.pdf', 'https://www.sciencedirect.com/science/article/pii/S1389128613000285']",0,12_programming_SDNs,0.9,1
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e",d,,"Sequential composition involves applying multiple operations in a specific order. The only choice that clearly demonstrates this is option d, which involves first blocking all traffic except port 80, and then load balancing the allowed port 80 traffic across three destination IP addresses. The other choices either perform a single operation (a, b, c) or perform operations without a strict ordering (e).","['Software Defined Networks: A Systems Approach by Peterson, Larry L., and Davie, Bruce S.', 'SDN: Software Defined Networks by Nadeau, Thomas D., and Gray, Ken']",0,12_programming_SDNs,0.9,1
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,"Parallel composition involves applying multiple policies or actions simultaneously to the same traffic. In choice a, load balancing is performed on traffic that matches either of two conditions (source prefix or destination port), which is an example of parallel composition. Similarly, in choice e, load balancing and routing are applied in parallel to the same traffic. The other choices describe sequential composition (b), a single action (c), or a conditional action (d), but not parallel composition.","['https://sdn.systemsapproach.org/softwareflow.html#parallel-composition', 'https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-jose.pdf']",0,12_programming_SDNs,0.9,1
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,"The correct Pyretic rule for matching traffic from either source IP 10.0.0.1 or 10.0.0.2 to destination IP 1.2.3.4 is option c: (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4). The '+' operator allows matching either source IP, and the '>>' operator sequences this match with modifying the destination IP.","['Pyretic: A Language and Runtime System for Network Virtualization and SDN Programming, NSDI 2013, https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final126.pdf', 'Pyretic Github Repository Documentation, https://github.com/frenetic-lang/pyretic']",1,12_programming_SDNs,0.95,1
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,b,,"The correct Pyretic rule for sending traffic from source IP 10.0.0.1 to destination IP 10.1.2.3 and traffic from source IP 10.0.0.2 to destination IP 10.2.3.4 is option b: (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4)). The '>>' operator in Pyretic represents sequential composition, meaning the first policy is applied followed by the second policy. The '+' operator represents parallel composition, allowing the two flow rules to be applied independently. The other options use incorrect operators or ordering of the policies.","['Pyretic: A Language for Software Defined Networks - https://www.frenetic-lang.org/pyretic', 'Pyretic documentation - https://github.com/frenetic-lang/pyretic/wiki']",1,12_programming_SDNs,0.95,1
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c,e",,"Dynamic policies in Pyretic are used when the policy needs to change based on network conditions or external inputs. From the given choices:a. Checking traffic against a changing list of permitted/prohibited IPs would require a dynamic policy to adapt to the updates.c. Round-robin load balancing assigns flows to different destinations in a cyclic manner, requiring the policy to change for each new flow. e. Routing based on shortest paths and re-routing on failures is dynamic since the forwarding rules need to adapt to topology changes.In contrast, b and d involve static policies that always drop traffic from a fixed prefix or count that traffic, without any dynamic adjustments.","['https://openflow.stanford.edu/display/ONL/Pyretic+(Python+Network+Programming+Language)', 'https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final117.pdf']",1,12_programming_SDNs,0.9,1
