Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
78,What are some of the desired features in future SDN switches that motivate a programmable data plane? Select all that apply.,"a. Reducing energy consumption for custom packet processing.
b. Processing packets at higher rates.
c. A wider range of packet processing primitives.
d. Flexible match-action tables, such as the ability to compose multiple match-action tables in sequence or in parallel.
e. A configurable packet parser that is not tied to a specific header format.
",,"c,d,e","b,c,d,e",,Some desired features in future SDN switches that motivate a programmable data plane include: b) Processing packets at higher rates to handle increasing network speeds and traffic volumes. c) Supporting a wider range of packet processing primitives beyond simple forwarding to enable more sophisticated network functions. d) Allowing flexible composition of match-action tables to support complex packet processing pipelines. e) Having a configurable packet parser not tied to specific header formats to handle new and custom protocols. Reducing energy consumption (a) is a general goal but not a key motivator for programmable data planes specifically.,"['Nick Feamster, Jennifer Rexford, Ellen Zegura. The Road to SDN: An Intellectual History of Programmable Networks. ACM Queue, 2014.', 'Pat Bosshart et al. P4: Programming Protocol-Independent Packet Processors. ACM SIGCOMM Computer Communication Review, 2014.', 'Nate Foster et al. Languages for Software-Defined Networks. IEEE Communications Magazine, 2013.']",0,11_protocol_independent_forwarding,0.95,1
79,Which of the following best describes protocol independence?,"a. The ability to configure a packet parser in hardware that is agnostic to (and not constrained by) the control protocol.
b. The ability to evolve an existing control protocol without breaking interoperability.
c. The ability to run a switch independently from the controller.
d. The ability to support multiple protocols running in parallel on the same hardware.
e. The ability to run a network with both legacy OpenFlow switches and switches that support custom packet processing.
",,a,a,,"Protocol independence refers to the ability to configure a packet parser in hardware that is agnostic to and not constrained by the specific control protocol being used. This allows the data plane to process packets flexibly without being tied to a particular control protocol. The other options, while related to SDN concepts, do not directly define protocol independence.","['Software Defined Networks: A Comprehensive Approach by Paul Goransson, Chuck Black', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-protocol-independence/']",1,11_protocol_independent_forwarding,0.9,1
81,Which of the following describe functions of the P4 parser? Select all that apply.,"a. Constructing a graph of dependencies between different logical tables.
b. Translating rules to physical tables.
c. Verifying that the description of packet parsing is consistent with the behavior of an existing hardware switch (e.g., a legacy OpenFlow switch).
d. Translating a packet processing specification to a state machine.
e. Mapping logical tables to underlying switch resources.
",,"c,d",d,,"The P4 parser translates a packet processing specification into a state machine that extracts the required fields from the packets. It does not construct dependency graphs between tables, translate rules to physical tables, verify parsing behavior against existing hardware, or map logical tables to switch resources.","['https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.html#sec-packet-parsing', 'https://opennetworking.org/wp-content/uploads/2020/12/P4_Tutorial.pdf']",0,11_protocol_independent_forwarding,0.9,1
82,"Which of the following best describe the relationship between a language like P4, an assembler like NetASM, and target programmable hardware (e.g., RMT)?","a. P4 is much more amenable to ""cost semantics"" (i.e., figuring out how much a particular operation would cost in terms of power or area) than NetASM.
NetASM and P4 are two examples of high-level programming languages; they are interchangeable.
b. P4 has verifiable semantics, whereas NetASM does not.
c. A language like P4 would ""compile"" to an assembly language like NetASM, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
d. A language like NetASM would ""compile"" to an assembly language like P4, which would then specify a one-to-one relationship with resources on the target forwarding hardware.
",,c,c,,"P4 is a high-level language designed for programming the data plane of network devices. It provides an abstraction layer that allows developers to define packet processing behavior without worrying about the underlying hardware details. On the other hand, NetASM is a low-level assembly language that provides a more direct mapping to the hardware resources of the target device. In the compilation process, P4 code would typically be compiled down to a lower-level representation like NetASM, which would then have a one-to-one correspondence with the resources available on the target forwarding hardware such as RMT (Reconfigurable Match Tables).","['P4: Programming Protocol-Independent Packet Processors (https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.pdf)', 'NetASM: A Low-Level Assembly Language for Programmable Packet Processing (https://dl.acm.org/doi/abs/10.1145/2535771.2535778)', 'RMT: Enabling Flexible Data Plane Processing with a Reconfigurable Match-Action Table (https://dl.acm.org/doi/abs/10.1145/2934872.2934897)']",1,11_protocol_independent_forwarding,0.9,1
83,Which of the folloiwing instruction types create state elements in NetASM? Select all that apply.,"a. JMP
b. DRP
c. LBL
d. MKT
e. MKR
",,"d,e","d,e",,"In NetASM, the MKT (Make Tag) and MKR (Make Register) instructions create state elements. MKT creates a tag, which is a stateful element used for matching packet fields. MKR creates a register, which is a stateful memory element that can store and update values across packets.","['NetASM: A Low-Level Assembly Language for Packet Processing on Programmable Hardware - https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-shahbaz.pdf', 'NetASM-based Programmable Switch Architecture for High Performance Packet Processing - https://ieeexplore.ieee.org/document/8526821']",1,11_protocol_independent_forwarding,0.9,1
84,Which of the following are true about locally contained applications? Select all that apply.,"a. Locally contained applications can be implemented with regular OpenFlow instructions.
b. A MAC learning switch can be implemented as a locally contained application.
c. Locally contained applications forward packets more slowly than their stateless counterparts.
d. A locally contained application can implement SDN logic without ever requiring a packet to be sent to the controller.
e. Locally contained applications allow the hardware pipeline to make switch-local state modifications.
",,"b,d,e","b,d,e",,"Locally contained applications can implement certain SDN logic entirely within the switch hardware pipeline without involving the controller. A MAC learning switch is an example of a locally contained application that can be implemented using OpenFlow instructions to maintain a switch-local MAC address table and make forwarding decisions. This allows the switch to handle packets faster than if it had to send them to the controller. Regular OpenFlow instructions are not sufficient on their own for locally contained apps, as they also require the ability to modify switch-local state. So while a, c are incorrect, b, d, e correctly describe capabilities of locally contained SDN applications.","['https://opennetworking.org/wp-content/uploads/2013/02/openflow-switch-v1.4.0.pdf', 'https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/OpenFlow%20Switch%20Specification%20v1.5.1.pdf']",1,11_protocol_independent_forwarding,0.9,1
86,What are some examples of optimizations that a compiler could perform on NetASM instructions? Select all that apply.,"a. Preventing bufferbloat for real-time application traffic.
b. Forwarding packets for high-volume flows at higher rates.
c. Composing or decomposing tables to save either on table size or table width.
d. Only instantiating hardware resources (e.g., table entries) for flows that actually have nonzero traffic volume.
e. Reordering instructions so that subsequent tables need not be as large (e.g., not storing state for unmatched packets).
",,"c,d,e","c,d,e",,"A compiler for NetASM instructions could perform optimizations like:c) Composing or decomposing tables to optimize table size or width. This could involve combining multiple smaller tables into one larger table, or splitting a wide table into narrower ones.  d) Only instantiating hardware resources like table entries for flows that actually have traffic, to avoid wasting resources on inactive flows.e) Reordering instructions so that tables appearing later in the program can be smaller. For example, by avoiding storing state for packets that don't match earlier tables.Choices a) and b) are more about runtime packet processing rather than compile-time optimizations on the instructions.","['NetASM: A Low-Level Assembly Language for Packet Processing on Programmable Routers, Shahbaz et al., SIGCOMM 2019', 'https://www.usenix.org/system/files/nsdi20-paper-harkous.pdf']",1,11_protocol_independent_forwarding,0.9,1
