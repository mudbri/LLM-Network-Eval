Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
106,Which of the following are true about configuration verification? Select all that apply.,"a. Configuration verification can only detect errors after the configuration is installed on production routers.
b. Configuration verification cannot detect incorrect protocol behavior that may result from faulty hardware.
c. Verifying the correctness of network behavior based on configuration requires a model of protocol behavior.
d. Configuration verification requires a large-scale simulation of network protocols, complete with tests for different message orderings and timings.
e. Configuration verification cannot detect incorrect protocol behavior that may result from buggy software.
",,"b,c,e",c,,"Configuration verification requires a model of the expected protocol behavior in order to check if the configuration will produce the desired network behavior. It does not necessarily require large-scale simulations with different message timings (d). Configuration verification can be done before deploying to production (a) and can detect some issues that may arise from buggy software (e) or faulty hardware (b), as long as those issues impact the modeled protocol behavior.","['https://www.cs.cornell.edu/courses/cs5413/2022fa/notes/verification.html', 'https://www.usenix.org/conference/nsdi20/presentation/fayaz', 'https://www.usenix.org/conference/nsdi17/technical-sessions/presentation/beckett']",0,14_verification,0.8,1
107,"Which of the following assertions could be verified with configuration verification (i.e., of a snapshot of router and switch configuration)? Select all that apply.","a. A route learned from one peer will not be readvertised to another peer.
b. The current settings of link weights will result in all routers being connected.
c. The configuration of route reflectors and clients ensures that any route learned from a neighboring AS will propagate to all routers in the topology.
d. There is no traffic pattern that would ever result in a stateful firewall dropping traffic.
e. Any time that an infection occurs, hosts are automatically quarantined.
",,"a,b,c","a,c",,"Configuration verification can check static properties of network device configurations. It can verify that route advertisement policies are set up correctly to prevent routes from being readvertised between peers (a) and that route reflector topology propagates external routes to all internal routers (c). However, it cannot reason about dynamic properties like resulting network connectivity (b), all possible traffic patterns through a firewall (d), or infection/quarantine behaviors that depend on live network conditions (e).","['https://www.cs.cornell.edu/courses/cs6114/2021fa/schedule/slides/16-verification.pdf', 'https://www.usenix.org/system/files/nsdi20spring_beckett_prepub.pdf']",0,14_verification,0.9,1
108,Which of the following are true about data-plane verification? Select all that apply.,"a. Data-plane verification techniques such as header-space analysis typically operate on a single ""snapshot"" of data-plane state.
b. Data plane verification can only operate on the forwarding table of a single router or switch; network-wide analysis is not possible.
c. Data-plane verification may detect errors that configuration analysis can miss in the cases of buggy control-plane software.
d. Data-plane verification requires accurate modeling of network protocols, including which bits are present in which part of the packet header.
e. Header-space analysis can only provide verification/analysis for specific packets; it cannot answer questions for general parts of flowspace.
",,"a,c","a,c,d",,"Data-plane verification techniques like header-space analysis typically operate on a snapshot of the data-plane state across the network (a). It can detect errors missed by configuration analysis if there are bugs in the control-plane software implementation (c). Data-plane verification requires accurately modeling the network protocols and header fields (d). However, data-plane verification is not limited to a single device and can perform network-wide analysis (b is incorrect). Header-space analysis is also not limited to specific packets and can reason about general parts of the flow space (e is incorrect).","['Header Space Analysis: Static Checking for Networks, Kazemian et al., NSDI 2012', 'Software Defined Networks: A Comprehensive Approach, Goransson, Black, and Culver, 2nd Edition, Chapter 7']",0,14_verification,0.95,1
109,Which of the following assertions could be verified with data plane verification? Select all that apply.,"a. The network will remain connected, given the failure of at most two links.
b. Two virtual network ""slices"" are not completely isolated: it is possible for traffic to travel from one slice to the other.
c. The configuration of the network's routing protocols will result in persistent oscillation (i.e., they will never settle on a stable set of routes).
d. The forwarding table state in the routers across the network will result in a forwarding loop.
e. The rules installed on the firewalls in the network ensure that only port 80 traffic can ever reach the web server from the rest of the Internet.
",,"b,d,e","b,d,e",,"Data plane verification focuses on analyzing the forwarding behavior of the network based on the current forwarding table state in the switches/routers. It can verify properties related to reachability, isolation, loops, and policy enforcement. Choices b, d, and e fall under this category:b. Verifying isolation between virtual network slices is a reachability property that data plane verification can check.  d. Detecting forwarding loops based on the forwarding table state is a key use case for data plane verification.e. Confirming that firewall rules are correctly enforcing traffic policies (like only allowing port 80 to web servers) is another common application.Choices a and c are not directly verifiable through data plane techniques as they relate more to the control plane - a is about the network's resilience to link failures and c is about routing protocol convergence, both of which depend on control plane logic rather than just the current data plane state.","['https://www.cs.cornell.edu/~jnfoster/papers/frenetic-icfp.pdf', 'https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final51.pdf', 'https://www.cs.princeton.edu/~jrex/papers/veriflow-nsdi13.pdf']",1,14_verification,0.9,1
110,Which of the following is true about Kinetic policies? Select all that apply.,"a. State transitions can be exogenous or endogenous.
b. Kinetic's NuSMV verifier can verify that the data plane will never have loops.
c. State transitions can occur based on timing (e.g., a timeout).
d. The Kinetic controller can only process external events from routers and switches.
e. Pyretic's composition operators can help prevent state explosion.
",,"a,c,e","a,c,e",,"Kinetic policies can have both exogenous state transitions triggered by external events and endogenous transitions based on internal timers or counters (a, c). Pyretic's composition operators like parallel and sequential composition can help manage the complexity and potential state explosion in Kinetic policies (e). However, the Kinetic controller can process external events beyond just those from routers and switches (d is incorrect). And while Kinetic's NuSMV verifier is powerful, it cannot guarantee the complete absence of loops in the data plane under all circumstances (b is incorrect).","['https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-kim.pdf', 'https://www.cs.princeton.edu/~jrex/papers/kinetic13.pdf']",1,14_verification,0.9,1
112,"Which of the following NuSMV expressions encodes the statement ""It is always possible for the policy state to go to 'allow'.""","a. SPEC AG (!authenticated -> AX policy=allow)
b. None of the above.
c. SPEC A [ policy=allow U authenticated ]
d. SPEC AG (authenticated -> AX policy=allow)
e. SPEC AG (EF policy=allow)
",,e,e,,"The given statement ""It is always possible for the policy state to go to 'allow'"" is best encoded by the NuSMV expression 'SPEC AG (EF policy=allow)'. This uses the CTL (Computation Tree Logic) operators: - AG: 'always globally', meaning the formula must hold on the entire subsequent path.   - EF: 'exists finally', meaning there exists at least one path where the formula eventually holds. So this expression states that from every reachable state (AG), there exists a path that eventually reaches a state where policy=allow (EF policy=allow). This matches the original statement of it always being possible to reach the 'allow' policy state.","['Principles of Model Checking by Christel Baier and Joost-Pieter Katoen, Chapter 6 on Temporal Logic', 'Symbolic Model Checking by Kenneth L. McMillan, Chapter 2 on Computation Tree Logic (CTL)']",1,14_verification,0.95,1
