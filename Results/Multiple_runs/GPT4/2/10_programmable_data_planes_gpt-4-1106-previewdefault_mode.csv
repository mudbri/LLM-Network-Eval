Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
113,"Which are reasonable approaches for designing a fast, scalable, programmable data plane? Select all that apply.","a. Make hardware routers more programmable with custom OpenFlow chips.
b. Make software routers faster by reducing the need to copy packets from the kernel into user space.
c. Send all traffic through software switches running in user space.
d. Make software routers faster by distributing software routers across clusters.
e. Make software routers faster by amortizing packet-processing costs across batches of packets.
",,"a,b,d,e","a,b,d,e",,"The approaches for designing a fast, scalable, programmable data plane include making hardware more programmable and improving the efficiency of software routers. Custom OpenFlow chips (a) can be used to enhance the programmability of hardware routers. Reducing the need to copy packets from the kernel into user space (b) can significantly increase the performance of software routers. Distributing software routers across clusters (d) can also help in scaling out the data plane to handle more traffic. Amortizing packet-processing costs across batches of packets (e) is a well-known technique to improve throughput and reduce per-packet processing overhead. Sending all traffic through software switches running in user space (c) is not necessarily a reasonable approach for designing a scalable data plane, as it may introduce bottlenecks and is not inherently scalable or fast.","[""Open Networking Foundation, 'Software-Defined Networking: The New Norm for Networks', ONF White Paper, https://www.opennetworking.org/wp-content/uploads/2013/02/wp-sdn-newnorm.pdf"", ""Nick McKeown et al., 'OpenFlow: Enabling Innovation in Campus Networks', ACM SIGCOMM Computer Communication Review, https://dl.acm.org/doi/10.1145/1355734.1355746"", ""Costin Raiciu et al., 'Improving Datacenter Performance and Robustness with Multipath TCP', ACM SIGCOMM Computer Communication Review, https://dl.acm.org/doi/10.1145/1851182.1851224""]",1,10_programmable_data_planes,0.9,0.958848480773003
114,What are functions that are commonly performed by a programmable data plane? Select all that apply.,"a. Performing deep packet inspection
b. Forwarding
c. Specifying access control policies
d. Shaping traffic
e. Computing routes
",,"a,b,d","a,b,c,d",,"A programmable data plane offers various functions that go beyond the traditional forwarding of packets based on static rules. It can perform complex operations on packets as they traverse the network. These include: a) Performing deep packet inspection, which allows the data plane to analyze packet contents beyond just header information; b) Forwarding, which is the basic function of any data plane to move packets from one point to another; c) Specifying access control policies, which can dynamically allow or deny traffic based on a wide range of criteria; and d) Shaping traffic, which involves managing the flow of packets to ensure quality of service (QoS) and adherence to policy. e) Computing routes is typically a control plane function where routing paths are determined, not a data plane function.","['https://www.oreilly.com/library/view/software-defined-networking/9781491902945/ch04.html', 'https://www.networkworld.com/article/2287045/what-is-deep-packet-inspection-.html', 'https://www.cisco.com/c/en/us/solutions/enterprise-networks/what-is-traffic-shaping.html']",0,10_programmable_data_planes,0.95,0.9998526528436587
115,Which of the following functions might be performed by a Click element? Select all that apply.,"a. Reading a packet from a network device
b. Dropping packets
c. Counting packets
d. Classifying packets into different priority queues
e. Computing shortest paths routes between two routers
",,"a,b,c,d","a,b,c,d",,"Click is a modular software router framework that allows for flexible and rapid development of packet processing logic. Click elements are the basic building blocks that perform various tasks on packets as they traverse the Click configuration. Here's why the selected options are correct: (a) Click elements can indeed read packets from network devices. This is a basic function necessary for any packet processing framework. (b) Click configurations can include elements specifically designed to drop packets based on certain criteria. (c) Counting packets is another common function for Click elements, allowing for monitoring and analysis of traffic. (d) Classifying packets into different priority queues is an example of traffic management, which Click can perform. However, (e) computing shortest paths between routers is typically a function of routing protocols and algorithms, not a task performed by Click elements which are more focused on packet-level processing rather than high-level routing decisions.","['https://click.cs.columbia.edu/', 'https://www.cs.columbia.edu/~smb/papers/click-tocs.pdf']",1,10_programmable_data_planes,0.95,0.9999940998094462
116,Which of the following are true about programmable data planes in Click? Select all that apply.,"a. Click elements cannot perform common data plane operations such as TTL decrement or checksum computations.
b. Data-plane processing in Click is limited to a fixed set of elements provided by the software.
c. Click elements can be composed to perform complex functions, such as the forwarding at an IP router.
d. Click configuration is a simplified version of Python.
e. Click elements can be composed to perform complex network-wide functions, such as shortest paths or BGP routing.
",,c,"c,e",,"Click is a modular software router that allows for the composition of packet-processing elements. These elements can be connected to perform a variety of data plane operations, including complex functions like those performed by an IP router (option c). While Click itself is not a network-wide control platform, the elements can be used to implement complex network functions such as shortest paths or BGP routing when combined appropriately (option e). Option a is incorrect because Click elements can indeed perform common data plane operations such as TTL decrement and checksum computations. Option b is incorrect because although Click comes with a large set of pre-defined elements, users can also create their own elements, thus it is not limited to only the provided set. Option d is incorrect because Click configurations are written in the Click language, which is not a simplified version of Python.","['https://www.read.cs.ucla.edu/click/click', 'https://www.read.cs.ucla.edu/click/elements']",0,10_programmable_data_planes,0.95,0.9753233861355145
117,Why does a RouteBricks server assign one core per queue?,"a. Having multiple cores accessing the same queue would require each core to perform only one function in the packet processing pipeline, which is inefficient.
b. Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance.
c. Having multiple cores accessing the same queue might create the possibility that there is a queue that is not served by any cores.
d. Cores have heterogeneous performance, and packets are different sizes, so it makes sense to assign less powerful cores to queues that have smaller packets.
",,b,b,,"RouteBricks is a software-based router that leverages parallel processing to increase network throughput. When multiple cores access the same queue, synchronization mechanisms such as locking are required to prevent concurrent memory accesses and ensure data integrity. This locking can introduce significant overhead and slow down packet processing, as each core would have to wait for access to the queue. Therefore, assigning one core per queue avoids this contention and synchronization overhead, improving packet forwarding performance.",['https://dl.acm.org/doi/10.1145/1658939.1658941'],1,10_programmable_data_planes,0.9,0.9999940846288958
118,What are some tricks commonly employed in software to accelerate packet forwarding? Select all that apply.,"a. Ethernet GRE tunnels
b. Large packet buffers that hold multiple packets that can be read with a single read
c. Forwarding smaller packets before larger packets
d. Avoiding lookups on the software bridge between virtual interfaces and physical interfaces
e. Batch processing
",,"a,b,d,e","b,c,d,e",,"To accelerate packet forwarding in software, several techniques are commonly employed: b) Large packet buffers can improve efficiency by allowing multiple packets to be read with a single read operation, reducing the per-packet overhead. c) Forwarding smaller packets before larger ones can reduce latency for smaller packets, which are often more sensitive to delay. d) Avoiding lookups on the software bridge between virtual interfaces and physical interfaces can reduce the processing time needed for each packet. e) Batch processing allows the system to process multiple packets at once, reducing the per-packet processing cost. Option a) Ethernet GRE tunnels are not a packet forwarding acceleration technique; they are a tunneling protocol that encapsulates packets for transport over an IP network.","['https://en.wikipedia.org/wiki/Network_packet', 'https://en.wikipedia.org/wiki/Generic_Routing_Encapsulation', 'https://www.cisco.com/c/en/us/solutions/collateral/enterprise-networks/enterprise-network-security/white-paper-c11-736595.html']",0,10_programmable_data_planes,0.95,0.7404342973046135
119,What are some of the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design? Select all that apply.,"a. Current hardware makes it difficult to implement multiple match action stages, and to repurpose TCAM and SRAM across multiple match-action stages.
b. Current hardware cannot forward traffic at line rates.
c. The current OpenFlow protocol depends on the constraints of conventional switching chips.
d. Current hardware cannot support OpenFlow 1.0 match-action primitives.
e. Current hardware is difficult to repurpose in the field.
",,"a,c,e","a,c,e",,"The motivation for a custom OpenFlow chip design is often related to limitations in flexibility, performance, and adaptability of existing hardware when it comes to implementing software-defined networking principles. Option 'a' is correct because current hardware can have limitations in implementing multiple match-action stages and in the ability to repurpose TCAM (Ternary Content Addressable Memory) and SRAM (Static Random Access Memory) across these stages. Option 'c' is correct because the OpenFlow protocol's evolution can be constrained by the capabilities of conventional switching chips, which may not be designed with the flexibility required for OpenFlow's advanced features. Option 'e' is correct as the ability to repurpose existing hardware in the field to accommodate new network protocols or features is a significant challenge, motivating the design of more adaptable chips. Option 'b' is incorrect because many current hardware platforms can forward traffic at line rates, although there might be some exceptions. Option 'd' is incorrect because current hardware, especially that which is OpenFlow-enabled, does support OpenFlow 1.0 match-action primitives; the concerns are more about advanced features in later versions of OpenFlow.","['https://www.opennetworking.org/wp-content/uploads/2013/02/cs-openflow-spec-v1.3.0.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-openflow/', 'https://www.networkworld.com/article/2229156/cisco-subnet/why-openflow-has-momentum.html']",1,10_programmable_data_planes,0.85,0.9995725560465575
120,"Which of the following are motivations for SwitchBlade, which supports composition of pre-synthesized hardware data plane modules on an FPGA? Select all that apply.","a. Most data plane protocols involve composing only a limited number of data-plane actions.
b. Experimental data planes may need to operate in parallel with production data planes.
c. Programming in Verilog is difficult.
d. FPGAs are lower-cost and consume less power than conventional ASICs or OpenFlow switching chips.
e. Programming in C is difficult.
",,"a,b,c","a,b,c",,"SwitchBlade is motivated by the need to support flexible and high-performance data plane programming on FPGAs. The key motivations include: a) The observation that most data plane protocols involve composing a limited number of data-plane actions, which can be efficiently handled by pre-synthesized modules. b) The requirement that experimental data planes may need to operate in parallel with production data planes without disrupting them. This is particularly relevant in research and development settings where new protocols are tested alongside existing ones. c) The fact that programming FPGAs directly using hardware description languages like Verilog is difficult and time-consuming, which hinders rapid development and experimentation. Option d is incorrect because FPGAs generally do not consume less power than ASICs, and their cost comparison depends on the scale of production and use-case. Option e is not a motivation for SwitchBlade as it does not pertain to FPGA programming, which typically involves hardware description languages rather than high-level programming languages like C.","['https://dl.acm.org/doi/10.1145/2070562.2070570', 'https://ieeexplore.ieee.org/document/6339061', 'https://www.sciencedirect.com/topics/engineering/field-programmable-gate-array']",1,10_programmable_data_planes,0.9,0.868789418786306
