Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","a,c,d,e",,"Programming OpenFlow switches can be challenging for several reasons. a) An OpenFlow controller indeed only sees events for packets that the switches do not know how to handle, which means that the controller must be programmed to handle a variety of scenarios and ensure that the switch is properly configured for all possible packet types. c) Networks often have switches from multiple vendors, and these can have different capabilities and proprietary extensions, making it difficult to program them in a uniform way. d) OpenFlow switches are controlled at a low level of abstraction, which means that programmers need to have a deep understanding of the network protocols and low-level operations, increasing the complexity of the programming task. e) Network policies often involve many independent tasks, and ensuring that these tasks do not have conflicting behaviors can be complex, as it requires careful coordination and testing. As for b), OpenFlow networks do not necessarily require a single, centralized controller; they can be programmed with multiple controllers or distributed control planes.","['Open Networking Foundation. (n.d.). OpenFlow. https://www.opennetworking.org/sdn-resources/openflow', 'McKeown, N., et al. (2008). OpenFlow: enabling innovation in campus networks. ACM SIGCOMM Computer Communication Review, 38(2), 69-74.', 'Kreutz, D., Ramos, F. M. V., Verissimo, P. E., Rothenberg, C. E., Azodolmolky, S., & Uhlig, S. (2015). Software-Defined Networking: A Comprehensive Survey. Proceedings of the IEEE, 103(1), 14-76.']",0,12_programming_SDNs,0.95,0.8143008694959343
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,c,d",,"a. Switches indeed have limited room for flow table entries, and it is not feasible to store individual rules for all IP addresses in a prefix if the prefix encompasses a large number of addresses. Flow tables in switches are designed to be efficient with memory, and excessive rules can quickly fill up the table space.
c. The order in which OpenFlow rules are installed is critical. If a 'drop all' rule is installed before the rules allowing specific IP prefixes, it could result in all traffic being dropped due to the priority of the rules in the flow table.
d. As more IP addresses or prefixes are added to the whitelist, the number of flow table entries increases, which can degrade the performance of the switch as it has to process a larger number of rules.
e. This statement is incorrect because OpenFlow does support matching on IP prefixes using mask operations, which means that a single flow table entry can match a group of IP addresses. Therefore, it is not necessary to have a separate entry for each IP address within a prefix.","['Open Networking Foundation, ""OpenFlow Switch Specification"", https://www.opennetworking.org/wp-content/uploads/2014/10/openflow-switch-v1.3.5.pdf', 'N. McKeown et al., ""OpenFlow: Enabling Innovation in Campus Networks"", ACM SIGCOMM Computer Communication Review, 2008, https://dl.acm.org/doi/10.1145/1355734.1355746']",0,12_programming_SDNs,0.95,0.9877413017563638
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e","a,c,e",,"Sequential composition in the context of networking policies refers to applying one policy after another in a sequence. For example, first a packet is checked against a certain rule, and then another action is taken based on whether it passed the first rule. Choices a, c, and e describe scenarios where two actions are taken in sequence: blocking traffic and then counting packets based on the block action. Choice b describes a conditional action (load balancing based on a match) rather than a sequence of actions. Choice d describes two actions (blocking and load balancing) but does not imply that the load balancing is conditional on the result of the blocking, hence it is not strictly sequential composition.","['https://www.sciencedirect.com/topics/computer-science/sequential-composition', 'https://en.wikipedia.org/wiki/Software-defined_networking']",0,12_programming_SDNs,0.95,0.9982541103775129
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,"Parallel composition in networking refers to performing multiple actions independently and simultaneously on network traffic. Option 'a' involves performing load balancing based on both source IP prefix and destination port, which can be seen as two independent criteria applied in parallel. Option 'e' involves load balancing across multiple destinations and then routing to the chosen destination, which are two actions that can be performed in parallel. Options 'b', 'c', and 'd' describe sequential actions that are based on a single criterion or a sequence of actions (like MAC learning after firewall filtering), rather than parallel composition of policies.","['https://en.wikipedia.org/wiki/Software-defined_networking', 'https://www.sciencedirect.com/topics/computer-science/parallel-composition']",0,12_programming_SDNs,0.9,0.774424843940217
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,"In Pyretic, the '+' operator is used to denote the logical OR operation, and the '>>' operator is used to denote the sequence or logical AND operation. To match traffic from either 10.0.0.1 or 10.0.0.2, we use the OR operator. Then, to apply the modification to the destination IP for both matches, we use the sequence operator to apply the 'mod(dstip=1.2.3.4)' action. Therefore, the correct rule that matches packets from either 10.0.0.1 or 10.0.0.2 and modifies the destination IP to 1.2.3.4 is '(match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)'.","['https://www.cs.princeton.edu/courses/archive/fall13/cos597E/assignments/pyretic.pdf', 'https://frenetic-lang.org/pyretic/']",1,12_programming_SDNs,0.95,0.9964019062087963
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,b,,"In Pyretic, the 'match' function is used to specify the match conditions for network traffic, and the 'mod' function is used to specify the actions to be taken on the packets that match the conditions. The '>>' operator is used to combine a match condition with an action, indicating that if the match condition is true, then the specified action should be taken. The '+' operator is used to combine two separate rules, meaning that both sets of conditions and actions are valid. Therefore, option 'b' correctly uses the '>>' operator to combine each match condition with its corresponding action and the '+' operator to combine the two rules into one.","['https://frenetic-lang.org/pyretic/', 'https://www.cs.cornell.edu/projects/bigreddata/pyretic/']",1,12_programming_SDNs,0.95,0.9896570599066202
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c,e",,"Dynamic policies in Pyretic and other SDN platforms are used when the network behavior needs to change based on certain conditions or over time. For example, a dynamic policy may involve changing access control lists, load balancing, or reacting to network events like link or node failures. Specifically:

a. Checking each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time is dynamic because the list can be updated, and policies need to adapt to these changes.

b. Dropping all traffic from a static IP prefix is a static policy because it does not change over time or based on traffic conditions.

c. Assigning each new traffic flow to a different destination IP address based on a round-robin load balancing policy is dynamic because the decision changes with each new flow.

d. Counting traffic from a specific IP prefix is typically a static monitoring policy, not a dynamic traffic management policy.

e. Forwarding traffic through the network based on shortest paths routing and re-routing traffic when links or nodes fail is dynamic because the routing decisions change in response to network conditions.","['https://www.cs.cornell.edu/projects/bigreddata/pyretic/', 'https://www.opennetworking.org/software-defined-standards/overview/']",1,12_programming_SDNs,0.95,0.9999922669721001
