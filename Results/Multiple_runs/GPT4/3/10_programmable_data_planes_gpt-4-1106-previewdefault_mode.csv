Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
113,"Which are reasonable approaches for designing a fast, scalable, programmable data plane? Select all that apply.","a. Make hardware routers more programmable with custom OpenFlow chips.
b. Make software routers faster by reducing the need to copy packets from the kernel into user space.
c. Send all traffic through software switches running in user space.
d. Make software routers faster by distributing software routers across clusters.
e. Make software routers faster by amortizing packet-processing costs across batches of packets.
",,"a,b,d,e","a,b,d,e",,"The approaches for designing a fast, scalable, programmable data plane include making hardware more programmable and improving the efficiency of software routers. Custom OpenFlow chips (a) can be used to enhance the programmability of hardware routers. Reducing the need to copy packets from the kernel into user space (b) can significantly increase the speed of software routers. Distributing software routers across clusters (d) can also improve scalability and performance. Amortizing packet-processing costs across batches of packets (e) is a known technique to increase throughput and efficiency in packet processing. Sending all traffic through software switches running in user space (c) is not necessarily a reasonable approach for scalability and performance, as it can introduce bottlenecks and latency issues.","['https://www.opennetworking.org/sdn-resources/openflow', 'https://ieeexplore.ieee.org/document/7093034', 'https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/kalia']",1,10_programmable_data_planes,0.9,0.973858546989404
114,What are functions that are commonly performed by a programmable data plane? Select all that apply.,"a. Performing deep packet inspection
b. Forwarding
c. Specifying access control policies
d. Shaping traffic
e. Computing routes
",,"a,b,d","a,b,c,d",,"A programmable data plane offers various functions that go beyond the traditional forwarding of packets based on static rules. These functions include: (a) Performing deep packet inspection, which allows the data plane to analyze packet content beyond just header information for security or traffic management purposes. (b) Forwarding packets, which is a fundamental task of any network device's data plane. (c) Specifying access control policies, which can be dynamically programmed into the data plane to allow or deny traffic based on a wide range of criteria. (d) Shaping traffic, which involves managing the flow of packets to ensure quality of service (QoS) and adherence to policy. The computation of routes (e) is generally considered a control plane function, where routing protocols and algorithms determine the paths that traffic should take through the network.","['https://www.sdxcentral.com/networking/sdn/definitions/whats-sdn-controlled-programmable-data-plane/', 'https://www.networkworld.com/article/2229152/what-is-a-programmable-network-.html']",0,10_programmable_data_planes,0.95,0.9998338664060641
115,Which of the following functions might be performed by a Click element? Select all that apply.,"a. Reading a packet from a network device
b. Dropping packets
c. Counting packets
d. Classifying packets into different priority queues
e. Computing shortest paths routes between two routers
",,"a,b,c,d","a,b,c,d",,"Click is a modular software router framework that allows for flexible and programmable packet processing. The functions that can be performed by a Click element include: (a) Reading a packet from a network device, as elements are designed to handle packet input and output; (b) Dropping packets, which is a basic function in packet processing for managing traffic and ensuring security; (c) Counting packets, which is useful for monitoring and managing network traffic; (d) Classifying packets into different priority queues, which is part of traffic management and Quality of Service (QoS) features. However, (e) Computing shortest paths between two routers is typically a function of routing protocols and not a direct function of individual Click elements, which are more focused on packet-level processing rather than network-wide routing decisions.","['https://click.csail.mit.edu/', 'https://en.wikipedia.org/wiki/Click_modular_router']",1,10_programmable_data_planes,0.95,0.9999940998094263
116,Which of the following are true about programmable data planes in Click? Select all that apply.,"a. Click elements cannot perform common data plane operations such as TTL decrement or checksum computations.
b. Data-plane processing in Click is limited to a fixed set of elements provided by the software.
c. Click elements can be composed to perform complex functions, such as the forwarding at an IP router.
d. Click configuration is a simplified version of Python.
e. Click elements can be composed to perform complex network-wide functions, such as shortest paths or BGP routing.
",,c,"c,e",,"Click is a modular software router that allows for the composition of packet-processing elements. These elements can be connected to perform a variety of data plane operations, including complex functions like those performed by an IP router (option c). While Click itself is not a network-wide control platform, the elements can be used to implement complex network functions such as shortest paths or BGP routing when combined appropriately (option e). Option a is incorrect because Click elements can indeed perform common data plane operations such as TTL decrement and checksum computations. Option b is incorrect because although Click comes with a large set of pre-defined elements, users can also create their own elements, thus it is not limited to only a fixed set. Option d is incorrect because Click configurations are written in the Click language, which is not a simplified version of Python but a domain-specific language designed for routing configurations.","['https://www.read.cs.ucla.edu/click/click', 'https://www.read.cs.ucla.edu/click/elements', 'https://www.read.cs.ucla.edu/click/docs/lang']",0,10_programmable_data_planes,0.95,0.9753233861355145
117,Why does a RouteBricks server assign one core per queue?,"a. Having multiple cores accessing the same queue would require each core to perform only one function in the packet processing pipeline, which is inefficient.
b. Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance.
c. Having multiple cores accessing the same queue might create the possibility that there is a queue that is not served by any cores.
d. Cores have heterogeneous performance, and packets are different sizes, so it makes sense to assign less powerful cores to queues that have smaller packets.
",,b,b,,"In a multi-core system, when multiple cores access the same queue, there is a need for synchronization mechanisms such as locking to prevent concurrent memory accesses. This locking can introduce significant overhead and can slow down the packet forwarding performance because the cores may have to wait for locks to be released before they can proceed with processing packets. RouteBricks avoids this problem by assigning one core per queue, which eliminates the need for locking and allows each core to process packets independently and efficiently.",['https://dl.acm.org/doi/10.1145/1658939.1658941'],1,10_programmable_data_planes,0.9,0.9999963494876631
118,What are some tricks commonly employed in software to accelerate packet forwarding? Select all that apply.,"a. Ethernet GRE tunnels
b. Large packet buffers that hold multiple packets that can be read with a single read
c. Forwarding smaller packets before larger packets
d. Avoiding lookups on the software bridge between virtual interfaces and physical interfaces
e. Batch processing
",,"a,b,d,e","b,c,d,e",,"Software tricks to accelerate packet forwarding include various techniques to minimize latency and maximize throughput. Option 'b' is correct because using large packet buffers can reduce the number of I/O operations, allowing multiple packets to be read or written in a single system call, which can improve performance. Option 'c' is correct because forwarding smaller packets before larger ones can reduce the time a small packet waits behind a large packet, thus reducing latency. Option 'd' is correct because avoiding lookups can save processing time, especially in virtualized environments where such lookups can be particularly costly. Finally, option 'e' is correct because batch processing can amortize the cost of certain operations over multiple packets, reducing per-packet overhead and improving throughput. Option 'a', Ethernet GRE tunnels, is not a trick for accelerating packet forwarding; it is a tunneling protocol that encapsulates packets for transport over an IP network, which can add overhead rather than reduce it.","['https://en.wikipedia.org/wiki/Network_packet', 'https://en.wikipedia.org/wiki/Generic_Routing_Encapsulation', 'https://www.intel.com/content/www/us/en/io/io-acceleration-technology.html']",0,10_programmable_data_planes,0.95,0.5245325247672643
119,What are some of the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design? Select all that apply.,"a. Current hardware makes it difficult to implement multiple match action stages, and to repurpose TCAM and SRAM across multiple match-action stages.
b. Current hardware cannot forward traffic at line rates.
c. The current OpenFlow protocol depends on the constraints of conventional switching chips.
d. Current hardware cannot support OpenFlow 1.0 match-action primitives.
e. Current hardware is difficult to repurpose in the field.
",,"a,c,e","a,c,e",,"The motivation for a custom OpenFlow chip design is often related to limitations in flexibility, performance, and the ability to adapt to new requirements. Option (a) is correct because current hardware often has limitations in implementing multiple match-action stages flexibly, and reusing TCAM (Ternary Content Addressable Memory) and SRAM (Static Random-Access Memory) across these stages can be challenging. Option (c) is correct because the OpenFlow protocol's evolution can be constrained by the capabilities of conventional switching chips, which were not originally designed with OpenFlow in mind. Option (e) is correct as repurposing existing hardware in the field to adapt to new network protocols or policies can be difficult due to the fixed function nature of the hardware. Option (b) is incorrect because many current hardware switches are capable of forwarding traffic at line rates. Option (d) is incorrect because support for OpenFlow 1.0 match-action primitives is a basic requirement, and most current OpenFlow-capable hardware supports these primitives.","['https://www.opennetworking.org/wp-content/uploads/2013/02/cs-nos-ovs.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-openflow-protocol/', 'https://ieeexplore.ieee.org/document/6636633']",1,10_programmable_data_planes,0.95,0.9996284328861647
120,"Which of the following are motivations for SwitchBlade, which supports composition of pre-synthesized hardware data plane modules on an FPGA? Select all that apply.","a. Most data plane protocols involve composing only a limited number of data-plane actions.
b. Experimental data planes may need to operate in parallel with production data planes.
c. Programming in Verilog is difficult.
d. FPGAs are lower-cost and consume less power than conventional ASICs or OpenFlow switching chips.
e. Programming in C is difficult.
",,"a,b,c","b,c",,"SwitchBlade is motivated by the need to support experimental data planes that can operate alongside production data planes, which allows for testing and development without disrupting the production network. This is why option 'b' is correct. Additionally, programming FPGAs in hardware description languages like Verilog is recognized as a difficult task due to its complexity and low-level nature, hence option 'c' is also correct. Option 'a' is not necessarily a motivation for SwitchBlade, as the number of data-plane actions can be variable and is not limited to a small set. Option 'd' is incorrect because FPGAs typically consume more power and may cost more than ASICs, especially when produced in large quantities. ASICs are also specifically optimized for performance in networking tasks, which is why they are commonly used in production data planes. Option 'e' is not relevant to the motivations for SwitchBlade, as it is generally about the difficulty of programming in C, which is not directly related to the use of FPGAs or the composition of data plane modules.","['https://www.usenix.org/legacy/event/nsdi11/tech/full_papers/Anwer.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/whats-software-defined-networking/', 'https://ieeexplore.ieee.org/document/6138621']",0,10_programmable_data_planes,0.95,0.5044428442901658
