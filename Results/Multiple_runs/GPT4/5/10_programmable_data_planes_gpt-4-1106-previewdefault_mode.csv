Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
113,"Which are reasonable approaches for designing a fast, scalable, programmable data plane? Select all that apply.","a. Make hardware routers more programmable with custom OpenFlow chips.
b. Make software routers faster by reducing the need to copy packets from the kernel into user space.
c. Send all traffic through software switches running in user space.
d. Make software routers faster by distributing software routers across clusters.
e. Make software routers faster by amortizing packet-processing costs across batches of packets.
",,"a,b,d,e","a,b,d,e",,"The approaches for designing a fast, scalable, programmable data plane include making hardware more programmable and improving the efficiency of software routers. Custom OpenFlow chips (a) can be used to enhance the programmability of hardware routers. Reducing the need to copy packets from the kernel into user space (b) can significantly speed up software routers. Distributing software routers across clusters (d) can help in scaling the routers and enhancing their performance. Amortizing packet-processing costs across batches of packets (e) is a strategy to make processing more efficient by taking advantage of batch processing. Sending all traffic through software switches running in user space (c) is not necessarily a scalable or efficient approach, as it could introduce bottlenecks and does not inherently improve performance or programmability.","['https://www.opennetworking.org/sdn-resources/openflow', 'https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/kalia', 'https://ieeexplore.ieee.org/document/7116169']",1,10_programmable_data_planes,0.95,0.9905401111101707
114,What are functions that are commonly performed by a programmable data plane? Select all that apply.,"a. Performing deep packet inspection
b. Forwarding
c. Specifying access control policies
d. Shaping traffic
e. Computing routes
",,"a,b,d","a,b,c,d",,"A programmable data plane offers various functions that go beyond the traditional forwarding of packets based on static rules. Deep packet inspection (a) is a function that can be performed to analyze the data part (payload) of a packet in order to make more complex decisions, such as for security or application-specific handling. Forwarding (b) is a fundamental function of any data plane, programmable or not, which involves sending packets to their next hop based on header information. Specifying access control policies (c) can also be a function of a programmable data plane, where dynamic rules can be applied to control which packets can traverse the network. Traffic shaping (d) is another function that can be implemented in the data plane to manage the bandwidth and ensure quality of service (QoS) by controlling the rate of traffic flow. Computing routes (e), on the other hand, is typically a function of the control plane, not the data plane, as it involves determining the paths that packets should take through the network, which is usually handled by routing protocols or software-defined networking controllers.","['https://www.sdxcentral.com/networking/sdn/definitions/software-defined-networking-sdn-definition/', 'https://www.cisco.com/c/en/us/solutions/enterprise-networks/what-is-sdn.html', 'https://www.networkworld.com/article/2287045/what-is-deep-packet-inspection-.html']",0,10_programmable_data_planes,0.95,0.9998338664060641
115,Which of the following functions might be performed by a Click element? Select all that apply.,"a. Reading a packet from a network device
b. Dropping packets
c. Counting packets
d. Classifying packets into different priority queues
e. Computing shortest paths routes between two routers
",,"a,b,c,d","a,b,c,d",,"Click is a modular software router framework that allows for flexible and rapid development of packet processing logic. Click elements are the basic building blocks that perform various tasks on packets as they traverse the Click configuration. Here's why the selected options are correct: (a) Click elements can indeed read packets from network devices. This is a basic function necessary for any packet processing framework. (b) Click configurations can include elements specifically designed to drop packets based on certain criteria. (c) Counting packets is another common function for Click elements, allowing for monitoring and analysis of traffic. (d) Classifying packets into different priority queues is an example of traffic management, which Click elements can be designed to perform. The option (e) 'Computing shortest paths routes between two routers' is not typically a function of Click elements. Click is more focused on packet processing rather than high-level routing decisions, which would be the domain of a routing protocol or a control plane in a network.","['https://www.read.cs.ucla.edu/click/', 'https://www.read.cs.ucla.edu/click/elements']",1,10_programmable_data_planes,0.95,0.999996871095245
116,Which of the following are true about programmable data planes in Click? Select all that apply.,"a. Click elements cannot perform common data plane operations such as TTL decrement or checksum computations.
b. Data-plane processing in Click is limited to a fixed set of elements provided by the software.
c. Click elements can be composed to perform complex functions, such as the forwarding at an IP router.
d. Click configuration is a simplified version of Python.
e. Click elements can be composed to perform complex network-wide functions, such as shortest paths or BGP routing.
",,c,"c,e",,"Click is a modular software router that allows for the composition of packet-processing elements. These elements can be connected to form more complex network functions. Option (c) is correct because Click elements can indeed be combined to perform complex functions like those at an IP router. Option (e) is also correct because Click can be used to implement complex network-wide functions, including algorithms for shortest paths or BGP routing, by composing the right set of elements. Option (a) is incorrect because Click elements can perform a wide range of data plane operations, including TTL decrement and checksum computations. Option (b) is incorrect as Click's processing is not limited to a fixed set of elements; users can create new elements. Option (d) is incorrect because Click configurations are not a simplified version of Python; they use their own language that defines how elements are connected.","['https://click.csail.mit.edu/', 'https://en.wikipedia.org/wiki/Click_modular_router']",0,10_programmable_data_planes,0.95,0.9840189248923019
117,Why does a RouteBricks server assign one core per queue?,"a. Having multiple cores accessing the same queue would require each core to perform only one function in the packet processing pipeline, which is inefficient.
b. Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance.
c. Having multiple cores accessing the same queue might create the possibility that there is a queue that is not served by any cores.
d. Cores have heterogeneous performance, and packets are different sizes, so it makes sense to assign less powerful cores to queues that have smaller packets.
",,b,b,,"RouteBricks is a software-based router that leverages parallel processing to increase network throughput. When multiple cores access the same queue, synchronization mechanisms such as locking are required to prevent concurrent memory accesses and ensure data integrity. This locking can introduce significant overhead and slow down packet processing, as each core would have to wait for access to the queue. Therefore, assigning one core per queue avoids this contention and synchronization overhead, improving packet forwarding performance.",['https://dl.acm.org/doi/10.1145/1658939.1658941'],1,10_programmable_data_planes,0.95,0.9999940846288958
118,What are some tricks commonly employed in software to accelerate packet forwarding? Select all that apply.,"a. Ethernet GRE tunnels
b. Large packet buffers that hold multiple packets that can be read with a single read
c. Forwarding smaller packets before larger packets
d. Avoiding lookups on the software bridge between virtual interfaces and physical interfaces
e. Batch processing
",,"a,b,d,e","b,c,d,e",,"To accelerate packet forwarding in software, several techniques can be employed: b) Large packet buffers can improve efficiency by allowing multiple packets to be read with a single read operation, reducing the per-packet overhead. c) Forwarding smaller packets before larger ones can optimize throughput and reduce latency, as smaller packets will spend less time in queues. d) Avoiding lookups on the software bridge between virtual and physical interfaces can reduce processing overhead and thus speed up packet forwarding. e) Batch processing allows the system to handle multiple packets at once, improving the throughput by amortizing the processing cost over several packets. Ethernet GRE tunnels (a) are a technique for encapsulating packets for tunneling, not specifically for accelerating packet forwarding.","['https://en.wikipedia.org/wiki/Network_packet', 'https://en.wikipedia.org/wiki/Network_switch#Packet_forwarding', 'https://en.wikipedia.org/wiki/Packet_processing']",0,10_programmable_data_planes,0.95,0.8126490786040984
119,What are some of the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design? Select all that apply.,"a. Current hardware makes it difficult to implement multiple match action stages, and to repurpose TCAM and SRAM across multiple match-action stages.
b. Current hardware cannot forward traffic at line rates.
c. The current OpenFlow protocol depends on the constraints of conventional switching chips.
d. Current hardware cannot support OpenFlow 1.0 match-action primitives.
e. Current hardware is difficult to repurpose in the field.
",,"a,c,e","a,c,e",,"The motivation for a custom OpenFlow chip design is often related to limitations in flexibility, performance, and the ability to adapt to new requirements. Option (a) is correct because current hardware often has limitations in implementing multiple match-action stages flexibly, and reusing TCAM (Ternary Content Addressable Memory) and SRAM (Static Random-Access Memory) across these stages can be challenging. Option (c) is correct because the OpenFlow protocol's evolution can be constrained by the capabilities of conventional switching chips, which were not originally designed with OpenFlow in mind. Option (e) is correct as repurposing existing hardware in the field to adapt to new network protocols or policies can be difficult due to the fixed function nature of the hardware. Option (b) is incorrect because many current hardware switches are capable of forwarding traffic at line rates. Option (d) is incorrect because support for OpenFlow 1.0 match-action primitives is a basic requirement, and most current OpenFlow-capable hardware supports these primitives.","['https://www.opennetworking.org/wp-content/uploads/2013/02/cs-nos-herding.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/whats-the-difference-between-sdn-and-openflow/', 'https://www.researchgate.net/publication/261149490_Software_Defined_Networking_A_Comprehensive_Survey']",1,10_programmable_data_planes,0.95,0.9997808309900372
120,"Which of the following are motivations for SwitchBlade, which supports composition of pre-synthesized hardware data plane modules on an FPGA? Select all that apply.","a. Most data plane protocols involve composing only a limited number of data-plane actions.
b. Experimental data planes may need to operate in parallel with production data planes.
c. Programming in Verilog is difficult.
d. FPGAs are lower-cost and consume less power than conventional ASICs or OpenFlow switching chips.
e. Programming in C is difficult.
",,"a,b,c","a,b,c",,"SwitchBlade is motivated by the need to allow for flexible and efficient composition of data plane modules to support experimental protocols without disrupting production traffic. This aligns with options (a) and (b). The motivation for SwitchBlade also includes addressing the difficulty of programming in hardware description languages like Verilog, which is a more specialized skill than programming in high-level languages like C, as indicated in option (c). Option (d) is incorrect because while FPGAs may offer flexibility, they are not necessarily lower in cost or power consumption compared to ASICs or OpenFlow switches; the cost and power consumption depend on the specific use case and technology. Option (e) is incorrect because the difficulty of programming in C is not a specific motivation for SwitchBlade, which is more concerned with hardware programming challenges.","[""https://ieeexplore.ieee.org/document/6133216 - 'Design and Implementation of a Hardware and Software Testbed for Programmable Wireless Networks'"", ""https://dl.acm.org/doi/10.1145/1879141.1879171 - 'SwitchBlade: a platform for rapid deployment of network protocols on programmable hardware'""]",1,10_programmable_data_planes,0.95,0.68326324858779
