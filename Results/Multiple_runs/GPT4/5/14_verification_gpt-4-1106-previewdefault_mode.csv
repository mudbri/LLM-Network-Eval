Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
106,Which of the following are true about configuration verification? Select all that apply.,"a. Configuration verification can only detect errors after the configuration is installed on production routers.
b. Configuration verification cannot detect incorrect protocol behavior that may result from faulty hardware.
c. Verifying the correctness of network behavior based on configuration requires a model of protocol behavior.
d. Configuration verification requires a large-scale simulation of network protocols, complete with tests for different message orderings and timings.
e. Configuration verification cannot detect incorrect protocol behavior that may result from buggy software.
",,"b,c,e","b,c",,"Configuration verification is the process of ensuring that a network configuration will behave as intended before it is deployed. It is true that configuration verification cannot detect incorrect protocol behavior that may result from faulty hardware (b) because it typically involves checking the configuration against a model or specification, not against the actual physical devices. Similarly, it cannot detect issues that arise due to buggy software (e) for the same reason. Configuration verification does indeed require a model of protocol behavior (c) to predict how the network should behave under the given configuration. It does not necessarily require a large-scale simulation of network protocols with different message orderings and timings (d); verification can be done using various methods, some of which are less resource-intensive. Lastly, configuration verification does not have to wait until the configuration is installed on production routers (a); it can be, and often is, done in a pre-deployment stage to catch errors early.","['https://www.cisco.com/c/en/us/support/docs/cloud-systems-management/network-services-orchestrator/213473-understand-and-verify-device-and-service.html', 'https://www.juniper.net/documentation/en_US/junos/topics/topic-map/verification-of-configuration.html', 'B. T. Loo, T. Condie, M. Garofalakis, D. E. Gay, J. M. Hellerstein, P. Maniatis, R. Ramakrishnan, T. Roscoe, and I. Stoica. Declarative networking: language, execution and optimization. In SIGMOD, 2006.']",0,14_verification,0.9,0.9218326019031345
107,"Which of the following assertions could be verified with configuration verification (i.e., of a snapshot of router and switch configuration)? Select all that apply.","a. A route learned from one peer will not be readvertised to another peer.
b. The current settings of link weights will result in all routers being connected.
c. The configuration of route reflectors and clients ensures that any route learned from a neighboring AS will propagate to all routers in the topology.
d. There is no traffic pattern that would ever result in a stateful firewall dropping traffic.
e. Any time that an infection occurs, hosts are automatically quarantined.
",,"a,b,c","a,c",,"Configuration verification involves examining the static configuration of network devices to ensure they are set up correctly according to certain policies or requirements. It does not involve dynamic or runtime states such as traffic patterns or the behavior of hosts under certain conditions. Therefore, it can verify static policies such as route advertisement behaviors and the configuration of route reflectors and clients.

a. A route learned from one peer will not be readvertised to another peer. This can be verified by examining routing policies and filters set up in the configuration.
c. The configuration of route reflectors and clients ensures that any route learned from a neighboring AS will propagate to all routers in the topology. This can be verified by analyzing the configuration of BGP route reflectors and their clients, which is part of the static configuration of routers.

b, d, and e involve dynamic behavior or runtime states that cannot be verified by just looking at the configuration. Link weights affecting connectivity (b) would require an analysis of the actual state of the network, traffic patterns affecting a stateful firewall (d) would need traffic analysis or simulation, and the response to an infection (e) would involve the dynamic response of the network to events.","['https://en.wikipedia.org/wiki/Software-defined_networking', 'https://www.cisco.com/c/en/us/solutions/enterprise-networks/software-defined-access/index.html', 'https://www.juniper.net/us/en/products-services/sdn/']",0,14_verification,0.95,0.8946458819840768
108,Which of the following are true about data-plane verification? Select all that apply.,"a. Data-plane verification techniques such as header-space analysis typically operate on a single ""snapshot"" of data-plane state.
b. Data plane verification can only operate on the forwarding table of a single router or switch; network-wide analysis is not possible.
c. Data-plane verification may detect errors that configuration analysis can miss in the cases of buggy control-plane software.
d. Data-plane verification requires accurate modeling of network protocols, including which bits are present in which part of the packet header.
e. Header-space analysis can only provide verification/analysis for specific packets; it cannot answer questions for general parts of flowspace.
",,"a,c","a,c,d",,"Data-plane verification techniques, such as header-space analysis, operate on a snapshot of the network's data-plane state. This allows them to analyze the state of the network at a specific point in time (a). It is not limited to a single router or switch; network-wide analysis is indeed possible, which makes choice (b) incorrect. Data-plane verification can uncover errors that might be missed by configuration analysis, especially if there are bugs in the control-plane software that affect the data-plane state (c). Accurate modeling of network protocols is essential for data-plane verification because it relies on understanding how packets are processed and forwarded based on their headers (d). Header-space analysis is actually quite powerful and can be used to analyze not just specific packets but also general properties of flows across the network, thus (e) is not correct.","['https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf', 'https://www.cs.princeton.edu/~msharifm/papers/hsa-nsdi12.pdf']",0,14_verification,0.95,0.9999846380256964
109,Which of the following assertions could be verified with data plane verification? Select all that apply.,"a. The network will remain connected, given the failure of at most two links.
b. Two virtual network ""slices"" are not completely isolated: it is possible for traffic to travel from one slice to the other.
c. The configuration of the network's routing protocols will result in persistent oscillation (i.e., they will never settle on a stable set of routes).
d. The forwarding table state in the routers across the network will result in a forwarding loop.
e. The rules installed on the firewalls in the network ensure that only port 80 traffic can ever reach the web server from the rest of the Internet.
",,"b,d,e","b,d",,"Data plane verification involves checking the state of the network as it relates to the forwarding of packets. This includes the state of forwarding tables, firewall rules, and other mechanisms that determine how packets are handled as they traverse the network. It does not generally involve the verification of the behavior of routing protocols over time or the resilience of the network topology to failures, which are more related to the control plane and network design respectively.

- Option (b) can be verified with data plane verification as it involves checking whether isolation properties are correctly enforced between different slices of the network, which is a matter of the forwarding rules in place.
- Option (d) can also be verified with data plane verification because it involves analyzing the forwarding tables to check for potential loops in the path that packets might take.

Options (a) and (c) are related to the network's resilience to failures and the behavior of routing protocols, which are not typically verified by examining the data plane state. Option (e) involves firewall rules, which can be verified with data plane verification; however, it also includes the assertion that 'only' port 80 traffic can reach the web server, which implies a need to verify the absence of other allowed traffic, possibly requiring a more comprehensive analysis than just the data plane.","['https://www.sciencedirect.com/topics/computer-science/data-plane', 'https://www.oreilly.com/library/view/software-defined-networking/9781449342302/ch01.html', 'https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/zeng']",0,14_verification,0.85,0.5440078464691438
110,Which of the following is true about Kinetic policies? Select all that apply.,"a. State transitions can be exogenous or endogenous.
b. Kinetic's NuSMV verifier can verify that the data plane will never have loops.
c. State transitions can occur based on timing (e.g., a timeout).
d. The Kinetic controller can only process external events from routers and switches.
e. Pyretic's composition operators can help prevent state explosion.
",,"a,c,e","a,b,c,e",,"Kinetic is a network control platform that allows for dynamic policy changes in the network. The following statements are true about Kinetic policies: 

a. State transitions in Kinetic policies can be triggered by changes in the network (endogenous) or by external events (exogenous). 

b. Kinetic's NuSMV verifier is a model checking tool that can verify properties of the network, such as ensuring that the data plane will never have loops, which can be crucial for network stability. 

c. Kinetic policies can include timing-based state transitions, such as those triggered by timeouts, allowing for policies that adapt over time or in response to network conditions. 

e. Pyretic is a language for writing network policies that features composition operators. These operators can be used to build complex policies from simpler ones without causing a state explosion, which refers to the rapid growth of system states that can occur in complex systems. 

The statement d is false because the Kinetic controller can process a variety of events, not just those from routers and switches. It can react to both internal and external events, including those from applications or other sources.","['https://conferences.sigcomm.org/sigcomm/2013/papers/sigcomm/p199.pdf', 'https://www.cs.cornell.edu/projects/declarativenetworking/pyretic/pyretic_paper.pdf']",0,14_verification,0.95,0.9982261913788594
112,"Which of the following NuSMV expressions encodes the statement ""It is always possible for the policy state to go to 'allow'.""","a. SPEC AG (!authenticated -> AX policy=allow)
b. None of the above.
c. SPEC A [ policy=allow U authenticated ]
d. SPEC AG (authenticated -> AX policy=allow)
e. SPEC AG (EF policy=allow)
",,e,e,,"The correct expression for encoding 'It is always possible for the policy state to go to 'allow'' in NuSMV is e. SPEC AG (EF policy=allow). This expression can be broken down as follows: 'AG' means 'for all paths, always', and 'EF' means 'there exists a path where eventually'. So the expression translates to 'For all paths, it is always the case that there exists a path where eventually the policy state is 'allow''. This correctly captures the notion that at any point in time, regardless of the current state, there is some path that can lead to the policy state being 'allow'.","['https://nusmv.fbk.eu/NuSMV/userman/v21/nusmv_5.html', 'https://nusmv.fbk.eu/NuSMV/userman/v21/nusmv_7.html#SEC49']",1,14_verification,0.95,0.9999956342685299
