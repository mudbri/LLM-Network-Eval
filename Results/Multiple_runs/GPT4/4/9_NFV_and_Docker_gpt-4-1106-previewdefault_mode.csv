Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
72,"In NFV, which of the following is the function of steering?","a. Finding the best location to place a single network function in an enterprise or wide area network.
b. Installing custom packet processing code on servers in the network.
c. Placing middleboxes at places throughout the network to minimize network load.
d. Installing custom packet processing code on switches in the network.
e. Installing flow table entries in switches to forward traffic through network functions or middleboxes that are installed in the network
",,e,e,,"In the context of Network Function Virtualization (NFV), steering refers to the process of directing traffic through specific network functions or middleboxes. This is typically achieved by installing flow table entries in switches that dictate how traffic should be forwarded through the network to ensure it passes through the necessary network functions for processing. The steering process does not concern itself with the physical placement of the functions (choice a) or the installation of packet processing code on servers (choice b) or switches (choice d). It is more about the control of traffic flow rather than the placement of middleboxes to minimize network load (choice c).","['https://en.wikipedia.org/wiki/Network_function_virtualization', 'https://www.sdxcentral.com/networking/nfv/definitions/whats-network-functions-virtualization-nfv/']",1,9_NFV_and_Docker,0.95,0.9870728921960177
74,What are some advantages of Docker containers over virtual machines? Select all that apply.,"a. Containers can be connected to build a virtual network, whereas virtual machines cannot.
b. Performance in containers may be better since they invoke OS system calls directly, rather than through an emulated machine.
c. Containers require less storage and memory per-instance, and require less time to instantiate than virtual machines.
d. Containers provide more flexibility in the choice of operating system.
e. Containers provide better isolation than virtual machines.
",,"b,c","b,c",,"Containers are often preferred over virtual machines for several reasons. One of the key advantages is that containers share the host system's kernel, allowing them to be more efficient in terms of system resource usage. This leads to better performance (choice b) because they can invoke OS system calls directly without the overhead of going through a hypervisor, as virtual machines do. Another advantage is that containers are more lightweight in terms of storage and memory usage (choice c), and they can be spun up much faster than virtual machines. This makes them ideal for environments where rapid scaling is required. However, containers do not inherently provide more flexibility in the choice of operating systems compared to virtual machines (choice d) because they share the host's kernel. Each container's OS must be compatible with the host's kernel. As for isolation (choice e), virtual machines actually provide stronger isolation since each VM runs its own full instance of an operating system, whereas containers share the host OS's kernel.","['https://www.docker.com/resources/what-container', 'https://www.ibm.com/cloud/learn/containers', 'https://docs.docker.com/get-started/overview/']",1,9_NFV_and_Docker,0.95,0.999999091165773
75,Which of the following commands is used to instantiate a new Docker container by invoking a command in that container?,"a. docker stop
b. docker attach
c. docker commit
d. docker pull
e. docker run
",,e,e,,"The 'docker run' command is used to create a new container from a specified image and start it immediately. It can also be used to run a command within that new container. The other commands have different purposes: 'docker stop' stops a running container, 'docker attach' attaches to a running container, 'docker commit' creates a new image from a container's changes, and 'docker pull' pulls an image or a repository from a registry.","['https://docs.docker.com/engine/reference/commandline/run/', 'https://docs.docker.com/engine/reference/commandline/stop/', 'https://docs.docker.com/engine/reference/commandline/attach/', 'https://docs.docker.com/engine/reference/commandline/commit/', 'https://docs.docker.com/engine/reference/commandline/pull/']",1,9_NFV_and_Docker,0.99,1.0
76,Which of the following is true about networking Docker containers? Select all that apply.,"a. Docker containers can be networked to each other via the native Docker bridge or Open vSwitch.
b. A Docker container can never expose a low port (e.g., port 80) to the external Internet; Internet hosts must always reach a Docker service by a high port (e.g., 8080).
c. Docker containers running in different virtual machines cannot be networked together.
d. Connecting Docker containers requires setting up GRE tunnels between the containers.
e. Docker containers are not reachable from the external Internet by default.
",,"a,e","a,e",,"Docker containers can indeed be networked to each other using the native Docker bridge network or by using third-party solutions such as Open vSwitch. This allows for communication between containers on the same host or across different hosts. Option (e) is also correct; by default, Docker containers are isolated and not reachable from the external Internet. The user must explicitly map container ports to the host to make them accessible from the outside. Option (b) is incorrect because Docker allows port mapping, which means that a container can expose any port, including low ports like 80, to the external Internet by mapping it to a corresponding port on the host. Option (c) is incorrect because Docker containers running in different virtual machines can be networked together using various networking options like overlay networks. Option (d) is incorrect because setting up GRE tunnels is not a requirement for connecting Docker containers; Docker provides its own networking capabilities that do not necessitate GRE tunnels.","['https://docs.docker.com/network/', 'https://docs.docker.com/network/bridge/', 'https://docs.docker.com/network/overlay/', 'https://docs.docker.com/config/containers/container-networking/']",1,9_NFV_and_Docker,0.95,0.9994832459507387
