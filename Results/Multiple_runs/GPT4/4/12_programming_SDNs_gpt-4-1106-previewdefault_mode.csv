Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","a,c,d,e",,"Programming OpenFlow switches can be challenging for several reasons. a) An OpenFlow controller indeed only sees events for packets that the switches do not know how to handle, which means that the controller must be programmed to handle a variety of scenarios and ensure that the switch is properly configured for all possible packet types. c) Networks often have switches from multiple vendors, and these can have different capabilities and proprietary extensions, making it difficult to program them uniformly. d) OpenFlow switches operate at a low level of abstraction, meaning that programmers need to deal with the intricacies of switch behavior and packet handling, which can be complex. e) Network policies can be complex and involve many independent tasks that may have conflicting behaviors, which makes it difficult to ensure that the overall network behavior aligns with the desired policies. Option b) is incorrect because OpenFlow does not strictly require a single, centralized network controller; it can work with distributed controllers as well.","['https://www.opennetworking.org/sdn-resources/openflow', 'https://ieeexplore.ieee.org/document/6602305', 'https://www.sciencedirect.com/topics/computer-science/openflow']",0,12_programming_SDNs,0.95,0.9256114676811852
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,c,d",,"a. Switches do indeed have limited room for flow table entries, and representing a large IP prefix by individual IP addresses would be impractical and could easily exceed the capacity of a switch's flow table.
c. If the controller installs a generic 'drop all' rule before installing the rule to allow specific IP prefix traffic, it might result in all traffic being dropped before the rule allowing traffic is processed. The order of rule installation is critical in OpenFlow to ensure the intended policy is enforced correctly.
d. As more IP addresses are added to the list of permitted senders, the number of flow table entries could increase, potentially degrading the performance of the switch as it has to process a larger number of rules.
e. OpenFlow does support matching on IP prefixes using mask-based matching, not just exact matches, so this statement is incorrect.","['https://www.opennetworking.org/software-defined-standards/specifications/', 'https://ieeexplore.ieee.org/document/6602305']",0,12_programming_SDNs,0.95,0.9897928056909285
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e","a,c,e",,"Sequential composition in the context of networking policies refers to applying one policy after another in a sequence. For example, first a packet is checked against a certain rule, and then another action is taken based on whether it matched the rule or not. Choices a, c, and e all represent sequential composition because they involve performing an action (blocking traffic) and then performing another action based on the first (counting the packets). Choice b is not necessarily sequential as it's a single action (load balancing) based on a match (traffic matching a destination IP prefix). Choice d is not purely sequential as it involves both conditional action (blocking non-port 80 traffic) and parallel action (load balancing the allowed traffic), but it is not explicitly stated that the load balancing happens after the block, which would be required for it to be considered sequential composition.","['https://en.wikipedia.org/wiki/Software-defined_networking', 'https://www.sciencedirect.com/topics/computer-science/sequential-composition']",0,12_programming_SDNs,0.95,0.9982541103775129
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,"Parallel composition in networking refers to performing multiple actions or applying multiple policies on network traffic simultaneously or in parallel. Option 'a' suggests performing load balancing on traffic based on either source prefix or destination port, which implies two separate criteria are being checked in parallel. Option 'e' involves two actions: load balancing traffic across multiple destination IP addresses and then performing routing to the chosen IP address, which also indicates parallel composition as both actions are part of the traffic handling process. Options 'b', 'c', and 'd' describe singular actions or policies applied to traffic and do not inherently suggest parallel composition.","['https://en.wikipedia.org/wiki/Software-defined_networking', 'https://www.sdxcentral.com/networking/sdn/definitions/what-the-definition-of-software-defined-networking-sdn/']",0,12_programming_SDNs,0.9,0.842881013873379
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,"In Pyretic, the '+' operator is used to denote the logical OR operation, and the '>>' operator is used to denote the sequence or logical AND operation. To match traffic from either 10.0.0.1 or 10.0.0.2, we use the OR operator. Then, to specify the destination IP for both, we use the sequence operator to apply the modification to both matches. Therefore, the rule that matches traffic from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4 is '(match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)'.",['https://github.com/frenetic-lang/pyretic/wiki/Policy-Combinators'],1,12_programming_SDNs,0.9,0.9964019062087963
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,b,,"In Pyretic, the 'match' function is used to specify the match conditions for network traffic, and the 'mod' function is used to specify the actions to be taken on the packets that match the conditions. The '>>' operator is used to combine a match condition with an action, indicating that if the match condition is true, then the specified action should be taken. The '+' operator is used to combine two separate rules, meaning that both sets of conditions and actions are valid. Therefore, option 'b' correctly uses the '>>' operator to combine each match condition with its corresponding action and the '+' operator to combine the two rules into one.","['https://frenetic-lang.org/pyretic/', 'https://www.cs.cornell.edu/projects/bigreddata/pyretic/']",1,12_programming_SDNs,0.95,0.9896570599066202
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c,e",,"Dynamic policies in Pyretic are those that can change over time or in response to network conditions. Choice a involves checking against a list that may change, indicating a dynamic policy. Choice c involves load balancing, which is inherently dynamic as it assigns traffic flows to different servers possibly in a round-robin fashion. Choice e involves adapting to network changes such as link or node failures, which is a dynamic response to network conditions. Choices b and d describe static policies that do not change over time or in response to network conditions.","['https://www.cs.cornell.edu/projects/bigreddata/pyretic/', 'https://www.opennetworking.org/wp-content/uploads/2014/10/pyretic-hotnets12-final.pdf']",1,12_programming_SDNs,0.95,0.9999902405279241
