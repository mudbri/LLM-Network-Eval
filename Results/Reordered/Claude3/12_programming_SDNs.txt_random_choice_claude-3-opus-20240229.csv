Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. Networks often have switches from multiple hardware vendors.
b. OpenFlow switches control switches at a low level of abstraction.
c. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
d. Network policies involve many independent tasks that may have conflicting behaviors.
e. OpenFlow networks require a single, centralized network controller.
",,"b,c,d","a,b,d",,"Programming OpenFlow switches can be difficult for several reasons: a) Networks often have switches from multiple hardware vendors, making it challenging to write software that works consistently across all switches.  b) OpenFlow operates at a low level of abstraction, dealing with individual packets and flow table entries. This low-level programming model can be complex. d) Network policies often involve many independent tasks (routing, access control, load balancing, etc.) that may have conflicting behaviors. Coordinating these tasks in the controller software is difficult.  Choice c is incorrect because the OpenFlow controller sees all packets by default, not just unhandled packets. The controller can configure the switches to send specific packets or all packets to the controller. Choice e is incorrect because while a centralized controller is the most common architecture, OpenFlow does allow multiple controllers for scalability and fault tolerance.","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.3.1.pdf', 'https://www.sciencedirect.com/science/article/abs/pii/S1389128613001722']",0,12_programming_SDNs,0.9,1,0.1999999999999999
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
b. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
c. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
d. The controller may see more than the first packet for a flow that it has already installed.
e. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
",,"a,b,d,e","a,b,c",,"Expressing a policy to drop all traffic except from a specific IP prefix using OpenFlow rules has several issues. As the number of permitted IP addresses grows, the switch performance can degrade due to the increasing number of flow table entries (a). Switches have limited flow table capacity and cannot store rules for all individual IP addresses in a prefix by default (b). Since flow table entries can only perform exact IP address matches, allowing a group of IP addresses will require many flow table entries (c). The controller seeing more than the first packet for an installed flow (d) and incorrect rule order causing all traffic to be dropped (e) are not directly related to the specific policy and switch table size constraints described in the question.","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.3.1.pdf', 'https://www.sciencedirect.com/science/article/pii/S1389128613001345']",0,12_programming_SDNs,0.9,1,0.0
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 and count the number of packets that are not blocked.
e. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
",,"b,d,e","a,c,d,e",,"Sequential composition involves applying multiple operations in a specific order. Options a, c, d, and e all involve performing a filtering operation first (blocking traffic based on certain criteria), followed by a second operation (counting packets or load balancing). This sequential ordering of operations is an example of sequential composition. Option b does not exhibit sequential composition as it only involves a single operation of load balancing based on destination IP prefix matching.","['Software Defined Networking (SDN) course materials', 'Kreutz, D., Ramos, F. M., Verissimo, P. E., Rothenberg, C. E., Azodolmolky, S., & Uhlig, S. (2015). Software-defined networking: A comprehensive survey. Proceedings of the IEEE, 103(1), 14-76.']",0,12_programming_SDNs,0.95,1,0.0
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
b. Count all port 80 traffic.
c. Perform MAC learning on all traffic that is not blocked by a firewall rule.
d. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
e. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
",,"b,d,e","a,d",,"Parallel composition involves applying multiple policies or actions simultaneously to the same traffic. In choice (a), load balancing traffic across multiple destination IPs and then routing to those IPs are two parallel actions. Similarly in (d), checking if traffic is from 130.207.0.0/16 or destined to port 80, and load balancing if either is true, is parallel composition. The other choices describe a single action or policy being applied to traffic, which is not parallel composition.","['Software Defined Networking (SDN) course materials', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-parallel-composition-sdn/', 'https://www.opennetworking.org/sdn-definition/']",0,12_programming_SDNs,0.9,1,0.0
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
c. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
",,a,a,,"The correct Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4 is '(match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)'. This rule uses the '+' operator to combine the matches for the two source IP addresses, effectively creating an 'or' condition. It then uses the '>>' operator to apply the destination IP modification to the matched packets.","['https://github.com/frenetic-lang/pyretic/wiki/Language-Basics', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-pyretic/']",1,12_programming_SDNs,0.95,1,1.0
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
",,d,d,,The correct Pyretic rule is (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4)). This rule uses the '+' operator to combine two separate match-action pairs. The first pair matches traffic from source IP 10.0.0.1 and modifies the destination IP to 10.1.2.3. The second pair matches traffic from source IP 10.0.0.2 and modifies the destination IP to 10.2.3.4. The '+' operator allows both of these actions to be applied in parallel to the respective traffic flows.,"['https://github.com/frenetic-lang/pyretic/wiki/Language-Basics', 'https://www.cs.princeton.edu/courses/archive/fall14/cos561/papers/pyretic13.pdf']",1,12_programming_SDNs,0.9,1,1.0
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
b. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
c. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
d. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"b,c,e","b,c,e",,"Dynamic policies in Pyretic are those that can change behavior based on network conditions or external inputs. Options b, c, and e represent examples that would require dynamic policies:b. Round-robin load balancing across servers requires assigning each new flow to a different destination IP, which changes dynamically.c. Checking flows against a changing list of permitted/prohibited IPs necessitates a dynamic policy that can adapt to the updated lists.e. Routing based on shortest paths and re-routing when links/nodes fail requires dynamic updates to the forwarding policy as the network topology changes.Options a and d represent static policies that always count or drop traffic from a fixed IP prefix, which do not require dynamic updates.","['https://github.com/frenetic-lang/pyretic/wiki/Language-Basics#dynamic-policies', 'https://www.cs.princeton.edu/~jrex/papers/pyretic13.pdf']",1,12_programming_SDNs,0.95,1,1.0
