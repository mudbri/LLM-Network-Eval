Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. Networks often have switches from multiple hardware vendors.
b. OpenFlow switches control switches at a low level of abstraction.
c. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
d. Network policies involve many independent tasks that may have conflicting behaviors.
e. OpenFlow networks require a single, centralized network controller.
",,"b,c,d","a,b,d",,"a. Networks often have switches from multiple hardware vendors: Programming OpenFlow switches can be challenging when dealing with switches from different vendors due to variations in hardware capabilities and implementations. This can lead to inconsistencies in behavior and support for OpenFlow features. b. OpenFlow switches control switches at a low level of abstraction: OpenFlow switches operate at a low level of the network stack, requiring detailed control and management, which can be complex and error-prone. d. Network policies involve many independent tasks that may have conflicting behaviors: Defining network policies in OpenFlow environments can be complicated as different policies may conflict or interact in unexpected ways, requiring careful management to avoid issues.",[],0,12_programming_SDNs,0.9,0.6534208171493316,0.1999999999999999
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
b. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
c. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
d. The controller may see more than the first packet for a flow that it has already installed.
e. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
",,"a,b,d,e","a,b,c",,"a. As the number of entries in the switch table grows, the performance of the switch might suffer due to the increased processing overhead. b. Switches have limited space for flow table entries, which means they cannot store rules for all IP addresses in a prefix by default. c. Flow table entries in OpenFlow can only perform exact matches on IP addresses, so expressing policies based on groups of IP addresses would require multiple entries in the switch's flow table.","['https://people.csail.mit.edu/alizadeh/papers/sigcomm13-1.pdf', 'https://ieeexplore.ieee.org/document/7043169']",0,12_programming_SDNs,0.9,0.9120317530163567,0.0
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 and count the number of packets that are not blocked.
e. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
",,"b,d,e","c,d",,"Sequential composition refers to a series of actions that are performed one after the other. In the context of the given choices:
- Option c involves two sequential steps: first blocking all traffic except port 80 and then counting the number of packets that are blocked.
- Option d also consists of two sequential steps: first blocking all traffic except port 80 and then counting the number of packets that are not blocked.
Options a, b, and e do not demonstrate sequential composition as they involve individual actions or parallel operations.",[],0,12_programming_SDNs,0.9,0.7808304020418324,0.0
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
b. Count all port 80 traffic.
c. Perform MAC learning on all traffic that is not blocked by a firewall rule.
d. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
e. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
",,"b,d,e","a,d",,Parallel composition involves splitting traffic and handling it independently before merging it back together. Options a and d both describe scenarios where traffic is split based on certain criteria (destination IP addresses in option a and traffic from specific prefixes or destined to specific ports in option d) and then processed independently (load balancing) before being routed or forwarded accordingly. These examples demonstrate parallel composition.,[],0,12_programming_SDNs,0.9,0.9996405424203618,0.0
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
c. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
",,a,a,,"The correct Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4 is to use the logical OR operation with the '+' operator to match either of the source IP addresses, followed by the '>>' operator to modify the destination IP address. Option 'a' correctly follows this logic by combining two match conditions for source IP addresses (10.0.0.1 and 10.0.0.2) using the '+' operator and then applying the modification of the destination IP address using the '>>' operator.",[],1,12_programming_SDNs,0.95,0.6624379605231749,1.0
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
",,d,a,,The appropriate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4 should be structured as separate match and modify operations for each pair of IP addresses. Option 'a' correctly matches the source IP addresses and modifies the destination IP addresses for both cases individually.,[],0,12_programming_SDNs,0.9,0.9991555885861422,0.1999999999999999
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
b. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
c. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
d. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"b,c,e","b,c",,"Dynamic policies in Pyretic involve rules or actions that can change based on certain conditions or events. Option b, assigning each new traffic flow to a different destination IP address based on a round-robin load balancing policy, is an example of a dynamic policy as it dynamically changes the destination based on load balancing requirements. Option c, checking each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time, is also an example of a dynamic policy as the list of addresses can be updated, thus changing the policy.",[],0,12_programming_SDNs,0.9,0.9992523772092888,0.6000000000000001
