Question Number,Question Text,Choices,Correct Answer,LLM Answer,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,SM - Description,SM - Misunderstanding General,SM - Misunderstanding Reasons,SM - Misunderstanding General (secondary),SM - Misunderstanding Reasons (secondary),AQ - Inferrable(0-2)?,Source links work(number),Sources Types,Sources Relevant(number),AQ - Precise?,AQ - Explainable?,Effect - Conceptual error in explanaiton?(0/1),Effect - Subtopics,CD - detection student(1-3),CD - correction student(1-8),CD - detection knowledgeable(1-3),CD - correction knowledgeable(1-8),Score-right-minus-wrong
78,What are some of the desired features in future SDN switches that motivate a programmable data plane? Select all that apply.,"a. Reducing energy consumption for custom packet processing.
b. Processing packets at higher rates.
c. A wider range of packet processing primitives.
d. Flexible match-action tables, such as the ability to compose multiple match-action tables in sequence or in parallel.
e. A configurable packet parser that is not tied to a specific header format.
","c,d,e","b,c,d,e","Some of the desired features in future SDN switches that motivate a programmable data plane include:b) Processing packets at higher rates to handle increasing network speeds and traffic volumes.  c) Supporting a wider range of packet processing primitives beyond basic forwarding to enable more advanced network functions.d) Providing flexible match-action tables that can be composed in various ways to implement custom packet processing pipelines.e) Having a configurable packet parser not tied to specific header formats, allowing parsing of custom or future protocols.Reducing energy consumption (a) is a general goal but not a key motivator for programmable data planes specifically.","[""Nick McKeown et al. 'OpenFlow: Enabling Innovation in Campus Networks', ACM SIGCOMM CCR, 2008"", ""Pat Bosshart et al. 'P4: Programming Protocol-Independent Packet Processors', ACM SIGCOMM CCR, 2014"", ""Nate Foster et al. 'Languages for Software-Defined Networks', IEEE Communications Magazine, 2013""]",0,11_protocol_independent_forwarding,0.95,1,Conceptual issue - programmable data planes do not intend to process packets at a higher rate,Wrong Facts/Concept,Incorrect information/concept,,,0,3,"research paper, research paper, research paper",3,1,1,1,Advanced networking,3,4,1,1,0.6
81,Which of the following describe functions of the P4 parser? Select all that apply.,"a. Constructing a graph of dependencies between different logical tables.
b. Translating rules to physical tables.
c. Verifying that the description of packet parsing is consistent with the behavior of an existing hardware switch (e.g., a legacy OpenFlow switch).
d. Translating a packet processing specification to a state machine.
e. Mapping logical tables to underlying switch resources.
","c,d",d,The P4 parser is responsible for translating a packet processing specification written in the P4 language into a state machine that describes how packets should be parsed and processed. It takes the declarative P4 program and generates the logic for a programmable parser to extract the desired header fields from incoming packets based on the specified protocol headers and their ordering.,"['https://p4.org/p4-spec/docs/P4-16-v1.0.0-spec.html#sec-parsing', 'https://opennetworking.org/wp-content/uploads/2020/12/P4_Tutorial.pdf']",0,11_protocol_independent_forwarding,0.9,1,Misinformation about the purpose and jobs of the parser,Wrong Facts/Concept,Incorrect information/concept,,,0,1,documentation,1,1,1,0,Advanced networking,3,3,3,3,0.6
86,What are some examples of optimizations that a compiler could perform on NetASM instructions? Select all that apply.,"a. Preventing bufferbloat for real-time application traffic.
b. Forwarding packets for high-volume flows at higher rates.
c. Composing or decomposing tables to save either on table size or table width.
d. Only instantiating hardware resources (e.g., table entries) for flows that actually have nonzero traffic volume.
e. Reordering instructions so that subsequent tables need not be as large (e.g., not storing state for unmatched packets).
","c,d,e","c,e","A compiler for NetASM instructions could perform optimizations such as composing or decomposing tables to save on table size or width (c), and reordering instructions so that subsequent tables need not be as large, for example by not storing state for unmatched packets (e). The other options are not compiler optimizations but rather runtime optimizations or features.","['NetASM: A Low-Level Assembly Language for Packet Processing on Programmable Hardware, Sivaraman et al., SIGCOMM 2020', 'Compiling Packet Programs to Reconfigurable Switches, Gao et al., NSDI 2015']",0,11_protocol_independent_forwarding,0.8,1,Misinformation about the what the compiler can do in NetASM,Wrong Facts/Concept,Incorrect information/concept,,,0,1,research paper,1,1,0,1,Advanced networking,3,4,3,4,0.6
