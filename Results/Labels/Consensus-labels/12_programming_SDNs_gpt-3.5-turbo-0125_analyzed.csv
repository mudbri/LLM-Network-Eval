Question Number,Question Text,Choices,Correct Answer,LLM Answer,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,SM - Description,SM - Misunderstanding General,SM - Misunderstanding Reasons,SM - Misunderstanding General (secondary),SM - Misunderstanding Reasons (secondary),AQ - Inferrable(0-2)?,Source links work(number),Sources Types,Sources Relevant(number),AQ - Precise?,AQ - Explainable?,Effect - Conceptual error in explanaiton?(0/1),Effect - Subtopics,CD - detection student(1-3),CD - correction student(1-8),CD - detection knowledgeable(1-3),CD - correction knowledgeable(1-8),Unnamed: 46,Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
","a,d,e","a,c,d","a. An OpenFlow controller only sees events for packets that the switches do not know how to handle because OpenFlow switches are reactive, meaning they only send packets to the controller when they do not have a matching flow entry in their flow tables. This can make programming them challenging as the controller may not have visibility into all network events. c. Networks often have switches from multiple hardware vendors, which can make programming OpenFlow switches difficult due to differences in hardware capabilities, features, and behavior. d. OpenFlow switches control switches at a low level of abstraction, which can complicate programming as it requires dealing with low-level details of packet processing and forwarding.","['https://www.sciencedirect.com/science/article/pii/S235286481830172X', 'https://dl.acm.org/doi/10.1145/2342356.2342367']",0,12_programming_SDNs,0.9,0.643595922159399,"Conceptual issue - open flow switches are not dependent on the implementation and open flow versions are backward compatible. This should not make programming harder. Also, e is not selected",Wrong Facts/Concept,Incorrect information/concept,,,0,1.0,research paper,1.0,1,0,1,Advanced networking,3,3,1,1,,0.1999999999999999
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
","a,b,c,d","a,d,e","a. Switches have limited room for flow table entries, and they cannot store rules for all IP addresses in a prefix by default. This limitation can lead to issues when trying to express a policy that includes a large group of IP addresses. d. As the operator adds more IP addresses that are permitted to send traffic, the performance of the switch might suffer as the number of entries in the switch table grows. This increase in the number of entries can impact the switch's performance. e. Flow table entries in OpenFlow can only perform exact matches on IP addresses, so expressing policies that operate on groups of IP addresses will require multiple flow-table entries in the switch, potentially leading to scalability and performance issues.",[],0,12_programming_SDNs,0.9,0.991056855009329,"OpenFlow supports matching on IP prefixes using CIDR notation, which allows for matching on groups of IP addresses without needing an entry for each individual IP address. Therefore, it is possible to create rules that match on an entire IP prefix rather than requiring exact matches on IP addresses.",Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,0,1,Advanced networking,3,3,2,3,,0.0
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.","b,d,e","c,e","Sequential composition refers to a sequence of operations where the output of one operation becomes the input of the next operation. In option c, the operations are blocking all traffic except port 80 and then counting the number of packets that are blocked, which demonstrates sequential composition. Option e also involves sequential composition as it first blocks all traffic except port 80 and then counts the number of packets that are not blocked.",[],0,12_programming_SDNs,0.9,0.510054067896335,Reasoning error because c is not using the output of the first operation in the second one. Similarly b and d are also sequential,Incorrect reasoning/deduction,Faulty inference,,,0,,,,1,0,0,Advanced networking,3,3,2,3,,0.0
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.","a,c,d","a,e","Parallel composition involves performing multiple actions concurrently on the same traffic. Options a and e demonstrate parallel composition. In option a, load balancing is performed on traffic from a specific prefix or destined to a specific port. In option e, traffic is load balanced across multiple destination IP addresses and then routed accordingly. Options b, c, and d involve sequential actions or single actions on traffic, not parallel composition.",[],0,12_programming_SDNs,0.9,0.976504584058576,Reasoning error since concept of parallel composition is identified but not correctly appliedf,Incorrect reasoning/deduction,Faulty inference,,,0,,,,1,1,0,Advanced networking,3,3,2,3,,0.0
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.","a,c,e","a,c","Dynamic policies in Pyretic involve rules or actions that can change based on certain conditions or criteria. 
- Option a is correct as checking traffic against a list of permitted and prohibited source IP addresses that may change over time requires a dynamic policy to update and enforce these changes. 
- Option c is also correct as assigning traffic flows to different destination IP addresses based on load balancing policies like round-robin involves dynamically changing the forwarding decisions based on the current state of the network.",[],0,12_programming_SDNs,0.9,0.999922848593323,Option e is also correct - misinformation,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,0,0,Advanced networking,3,3,3,3,,0.6000000000000001
