Question Number,Question Text,Choices,Correct Answer,LLM Answer,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,SM - Description,SM - Misunderstanding General,SM - Misunderstanding Reasons,SM - Misunderstanding General (secondary),SM - Misunderstanding Reasons (secondary),AQ - Inferrable(0-2)?,Source links work(number),Sources Types,Sources Relevant(number),AQ - Precise?,AQ - Explainable?,Effect - Conceptual error in explanaiton?(0/1),Effect - Subtopics,CD - detection student(1-3),CD - correction student(1-8),CD - detection knowledgeable(1-3),CD - correction knowledgeable(1-8),Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
","a,d,e","a,c,d,e","Programming OpenFlow switches can be challenging for several reasons. Firstly, an OpenFlow controller does indeed only see events for packets that the switches do not know how to handle (a), which means that the programmer must anticipate and correctly handle a wide range of scenarios that the switches themselves cannot resolve. Secondly, while OpenFlow networks can benefit from centralized control logic, it is not a strict requirement that there be a single network controller (b), so this is not inherently a reason that programming them is difficult. However, the presence of switches from multiple hardware vendors (c) can introduce complexity due to potential differences in capabilities and implementation. Controlling switches at a low level of abstraction (d) means that programmers must have detailed knowledge of the network and switch operations, which can be complex and error-prone. Lastly, network policies often involve many independent tasks that may have conflicting behaviors (e), which requires careful coordination and conflict resolution in the programming logic.","['https://www.opennetworking.org/software-defined-standards/overview/', 'https://www.sdxcentral.com/networking/sdn/definitions/what-the-definition-of-software-defined-networking-sdn/', 'https://www.researchgate.net/publication/261149484_OpenFlow_Comprehensive_Survey']",0,12_programming_SDNs,0.95,0.863707314,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,1,1,0.6
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.","a,b,c,d","a,c,d","a. It is true that switches have limited space in their flow tables, and therefore cannot store an individual rule for each IP address within a large prefix. OpenFlow allows for CIDR notation to specify IP prefixes, which helps to mitigate this issue by summarizing a range of IP addresses into a single rule.

b. This statement is not entirely accurate. The OpenFlow protocol is designed such that the first packet of a new flow is sent to the controller, which then decides on the action to be taken and installs a flow rule in the switch. Subsequent packets of the same flow should not be sent to the controller if the rule is properly installed.

c. The order of rule installation is crucial. If a 'drop all traffic' rule is installed before the rule allowing specific traffic, then indeed all traffic might be dropped due to the priority of the rules processed by the switch. OpenFlow rules have priority levels to handle such cases, and care must be taken to ensure rules are installed in the correct order with the correct priorities.

d. Performance issues can arise as the number of flow table entries grows. Each new entry consumes resources, and a large number of entries can slow down the switch, especially if it needs to frequently consult the controller for instructions on new flows.

e. This statement is incorrect. OpenFlow supports matching on IP prefixes using CIDR notation, which allows for matching on groups of IP addresses without needing an entry for each individual IP address. Therefore, it is possible to create rules that match on an entire IP prefix rather than requiring exact matches on IP addresses.","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.3.0.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/inside-look-openflow-protocol/']",0,12_programming_SDNs,0.95,0.997884467,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,2,3,0.6
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.","b,d,e","a,c,e","Sequential composition in the context of Software Defined Networking (SDN) refers to the process of applying multiple network policies or actions in sequence. The following choices represent sequential composition because they involve performing one action after another in a specific order:

a. Block all port 80 traffic and count the number of packets that are blocked: This involves two sequential actions - first blocking the traffic and then counting the packets.

b. Load balancing does not inherently imply a sequence of different actions; it's a single action applied to traffic based on a condition.

c. Block all traffic except port 80 and count the number of packets that are blocked: Similar to option a, this involves first applying a block action and then counting the packets that match the criteria.

d. This option describes two actions, but they are not sequential; they are conditional. Blocking is for all traffic except port 80, and load balancing is applied only to port 80 traffic. It does not imply that one action follows the other.

e. Block all traffic except port 80 and count the number of packets that are not blocked: Again, this involves a sequence of actions - first blocking certain traffic and then counting the packets that are not blocked (which implies they are allowed through).

Options b and d are not examples of sequential composition because they describe actions that are conditional rather than sequential.","['https://en.wikipedia.org/wiki/Software-defined_networking', 'https://www.sciencedirect.com/topics/computer-science/sequential-composition']",0,12_programming_SDNs,0.9,0.994471159,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,2,3,0.0
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.","a,c,d","a,e","Parallel composition in networking, especially in the context of Software Defined Networking (SDN), refers to the ability to apply multiple network functions or policies simultaneously to network traffic. Here's an evaluation of each option:

a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80. - This implies that two separate conditions (traffic from a certain IP prefix and traffic destined to a certain port) are handled in parallel to determine whether load balancing should be applied. Hence, it is an example of parallel composition.

b. Perform MAC learning on all traffic that is not blocked by a firewall rule. - This describes a sequential process where MAC learning is applied only after firewall rules have been considered, which is not an example of parallel composition.

c. Count all port 80 traffic. - This is a singular action applied to traffic and does not involve parallel processes.

d. Block all traffic whose source IP address is contained in a list of blocked IP addresses. - This is another singular action that does not involve parallel processes.

e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses. - This option describes two actions (load balancing and routing) that are applied to the traffic in parallel, which makes it an example of parallel composition.","['https://www.sciencedirect.com/topics/computer-science/parallel-composition', 'https://www.oreilly.com/library/view/software-defined-networking/9781449342302/ch01.html']",0,12_programming_SDNs,0.9,0.726687564,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,2,3,0.0
