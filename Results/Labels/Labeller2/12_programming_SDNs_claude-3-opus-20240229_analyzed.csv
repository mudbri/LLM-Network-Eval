Question Number,Question Text,Choices,Correct Answer,LLM Answer,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,SM - Description,SM - Misunderstanding General,SM - Misunderstanding Reasons,SM - Misunderstanding General (secondary),SM - Misunderstanding Reasons (secondary),AQ - Inferrable(0-2)?,Source links work(number),Sources Types,Sources Relevant(number),AQ - Precise?,AQ - Explainable?,Effect - Conceptual error in explanaiton?(0/1),Effect - Subtopics,CD - detection student(1-3),CD - correction student(1-8),CD - detection knowledgeable(1-3),CD - correction knowledgeable(1-8),Unnamed: 46,Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
","a,d,e","c,e","Programming OpenFlow switches can be difficult for a couple reasons:c) Networks often have switches from multiple hardware vendors. Different vendors may have variations in their OpenFlow implementations which the controller needs to account for.  e) Network policies involve many independent tasks that may have conflicting behaviors. The controller needs to reconcile these conflicts and dependencies when programming flow rules across the switches.The other options are not correct:a) The controller sees all packets initially until it programs flow rules on the switches. b) While a centralized controller is common, distributed controllers are possible.d) OpenFlow provides a higher-level flow-based abstraction compared to programming individual switches.","['https://www.opennetworking.org/wp-content/uploads/2013/04/openflow-spec-v1.3.1.pdf', 'https://www.sciencedirect.com/science/article/pii/S1389128613000984']",0,12_programming_SDNs,0.8,1,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,3,3,,0.0
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
","a,b,c,d","a,d,e","Expressing a policy to drop all traffic except from a specific IP prefix using OpenFlow rules has several issues. Switches have limited flow table space and cannot store rules for all individual IP addresses in a prefix by default (a). As more permitted IP addresses are added, the growing number of entries can degrade switch performance (d). Since flow table entries only support exact IP address matches, implementing rules for IP address groups would consume many flow table entries (e). The controller seeing packets for already installed flows (b) and incorrect rule ordering causing all traffic to be dropped (c) are not directly related to the specific policy described in the question.","['OpenFlow Switch Specification, Version 1.5.1, Open Networking Foundation, 2015.', 'Software Defined Networks: A Comprehensive Approach, Second Edition, Paul Goransson, Chuck Black, Timothy Culver, 2017.']",0,12_programming_SDNs,0.9,1,,Wrong Facts/Concept,Incorrect information/concept,,,0,,,,1,1,1,,3,3,2,3,,0.0
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.","b,d,e",d,"Option d is the only choice that demonstrates sequential composition. It involves first blocking all traffic except port 80, and then load balancing the allowed port 80 traffic across three destination IP addresses. This is an example of chaining together two separate actions in a sequential manner. The other options either perform a single action or combine actions in parallel, but do not exhibit sequential composition.","['Software Defined Networking (SDN) course materials covering composition of network policies and functions', 'Understanding of sequential vs parallel composition of actions in a network context']",0,12_programming_SDNs,0.95,1,,Incorrect reasoning/deduction,Faulty inference,,,0,,,,1,1,0,,3,3,2,3,,0.2
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.","a,c,d","a,e","Parallel composition involves applying multiple policies or actions to the same traffic simultaneously. In choice (a), load balancing is performed on traffic that matches either of two conditions (source prefix or destination port), which is an example of parallel composition. Similarly, choice (e) applies both load balancing and routing policies to the same traffic, another case of parallel composition. The other choices describe sequential or conditional compositions rather than parallel.","['https://opennetworking.org/wp-content/uploads/2013/02/openflow-spec-v1.3.0.pdf', 'https://www.sdxcentral.com/networking/sdn/definitions/what-is-openflow/', 'https://www.sciencedirect.com/topics/computer-science/parallel-composition']",0,12_programming_SDNs,0.9,1,,Incorrect reasoning/deduction,Faulty inference,,,0,,,,1,1,0,,3,3,2,3,,0.0
