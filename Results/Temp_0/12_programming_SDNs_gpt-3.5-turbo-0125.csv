Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,Score-right-minus-wrong
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","a,c,d,e",,"a. When OpenFlow switches encounter packets they cannot handle, the controller is involved, making programming complex. 
c. Having switches from multiple vendors complicates programming due to potential interoperability issues. 
d. OpenFlow switches operate at a low level of abstraction, making programming more intricate. 
e. Network policies with conflicting behaviors require careful handling, adding complexity to programming OpenFlow switches.","['https://www.sciencedirect.com/science/article/pii/S2352864816300087', 'https://ieeexplore.ieee.org/document/7461376']",0,12_programming_SDNs,1.0,0.8653897811044676,0.6000000000000001
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,d,e",,"a. Switches have limited space in their flow tables, making it impractical to store rules for all IP addresses in a prefix individually. This limitation can lead to challenges in implementing policies based on specific IP address groups. 
 d. As the number of permitted IP addresses grows, the size of the switch table increases, potentially impacting the switch's performance due to the increased number of flow table entries. 
 e. Flow table entries in OpenFlow can only perform exact matches on IP addresses, so expressing policies based on groups of IP addresses would require multiple flow-table entries, further consuming space in the switch's memory.","['https://www.opennetworking.org/sdn-resources/onf-specifications/openflow/', 'https://www.sciencedirect.com/topics/computer-science/flow-table']",0,12_programming_SDNs,0.9,0.8300121020302951,0.0
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e","c,e",,"Sequential composition refers to the execution of operations in a specific order, where the output of one operation becomes the input of the next operation. In option c, the sequence involves blocking all traffic except port 80 first and then counting the number of packets that are blocked, demonstrating sequential composition. Similarly, in option e, the sequence involves blocking all traffic except port 80 first and then counting the number of packets that are not blocked, showcasing sequential composition.",[],0,12_programming_SDNs,1.0,0.4924843995068086,0.0
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,a. Load balancing traffic arriving from a specific prefix or destined to a specific port involves parallel composition to handle different flows simultaneously. This is an example of parallel composition. e. Load balancing traffic across multiple destination IP addresses and performing routing to those destinations concurrently demonstrates parallel composition as multiple tasks are executed in parallel.,['https://www.sciencedirect.com/topics/computer-science/parallel-composition'],0,12_programming_SDNs,0.9,0.9870209381130493,0.0
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,The appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4 is to first match both source IP addresses (10.0.0.1 and 10.0.0.2) and then modify the destination IP address to 1.2.3.4. The correct rule is represented by option c.,['https://github.com/frenetic-lang/pyretic/wiki/Tutorial:-Writing-Pyretic-Policies'],1,12_programming_SDNs,1.0,0.999920777498268,1.0
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,b,,"Option b is the appropriate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4. The '>>' operator in Pyretic represents sequential composition, which means the second rule is applied only to packets that match the first rule. This behavior aligns with the requirement of applying different modifications based on the source IP addresses.",['https://github.com/frenetic-lang/pyretic/wiki/Tutorial:-Writing-Your-First-Controller'],1,12_programming_SDNs,0.9,0.711311556757592,1.0
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c",,"a. Checking traffic against a list of permitted and prohibited source IP addresses that may change over time requires dynamic updates to the policy based on changing conditions, making it a dynamic policy in Pyretic. 
c. Assigning traffic flows to different destination IP addresses based on round-robin load balancing policy involves dynamically changing the forwarding decisions based on load distribution, which is a dynamic policy in Pyretic.",['https://dl.acm.org/doi/10.1145/2208917.2208933'],0,12_programming_SDNs,1.0,0.995150436599178,0.6000000000000001
