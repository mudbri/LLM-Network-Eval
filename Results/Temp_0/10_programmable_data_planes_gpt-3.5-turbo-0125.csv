Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence,Score-right-minus-wrong
113,"Which are reasonable approaches for designing a fast, scalable, programmable data plane? Select all that apply.","a. Make hardware routers more programmable with custom OpenFlow chips.
b. Make software routers faster by reducing the need to copy packets from the kernel into user space.
c. Send all traffic through software switches running in user space.
d. Make software routers faster by distributing software routers across clusters.
e. Make software routers faster by amortizing packet-processing costs across batches of packets.
",,"a,b,d,e","a,b,d,e",,"a. Making hardware routers more programmable with custom OpenFlow chips allows for flexibility and programmability in the data plane, enhancing its speed and scalability. This approach leverages specialized hardware for efficient packet processing. b. Reducing the need to copy packets from the kernel into user space helps in improving the performance of software routers by minimizing overhead. c. Sending all traffic through software switches running in user space can introduce bottlenecks and reduce performance due to the overhead of user space processing. d. Distributing software routers across clusters can enhance scalability and speed by parallelizing packet processing. e. Amortizing packet-processing costs across batches of packets helps in optimizing performance by reducing per-packet processing overhead.","['https://www.sciencedirect.com/science/article/pii/S2352864820300974', 'https://www.sciencedirect.com/science/article/pii/S2352864820300974']",1,10_programmable_data_planes,1.0,0.914505281025236,1.0
114,What are functions that are commonly performed by a programmable data plane? Select all that apply.,"a. Performing deep packet inspection
b. Forwarding
c. Specifying access control policies
d. Shaping traffic
e. Computing routes
",,"a,b,d","a,d",,a. Performing deep packet inspection is a function commonly performed by a programmable data plane to analyze and process packets at a granular level within the network. This operation is often done in the data plane itself. d. Shaping traffic is another function that can be implemented in the data plane to control the flow of packets based on defined policies or requirements. This operation is typically part of the data plane's functionality.,"['https://www.sciencedirect.com/topics/computer-science/data-plane', 'https://www.sciencedirect.com/topics/computer-science/deep-packet-inspection']",0,10_programmable_data_planes,0.9,0.5601906541695586,0.6000000000000001
115,Which of the following functions might be performed by a Click element? Select all that apply.,"a. Reading a packet from a network device
b. Dropping packets
c. Counting packets
d. Classifying packets into different priority queues
e. Computing shortest paths routes between two routers
",,"a,b,c,d","a,b,c,d",,"a. Click elements can read packets from network devices for processing. This is a common function performed by Click elements. b. Click elements can drop packets based on certain conditions or rules, making packet dropping a possible function. c. Click elements can count packets for various purposes like monitoring or statistical analysis. d. Click elements can classify packets into different priority queues based on defined criteria. e. Computing shortest path routes between routers is typically not a function performed by Click elements, as it is more related to routing algorithms and protocols rather than packet processing within a Click element.",['https://www.read.cs.ucla.edu/click/'],1,10_programmable_data_planes,0.9,0.999767289645256,1.0
116,Which of the following are true about programmable data planes in Click? Select all that apply.,"a. Click elements cannot perform common data plane operations such as TTL decrement or checksum computations.
b. Data-plane processing in Click is limited to a fixed set of elements provided by the software.
c. Click elements can be composed to perform complex functions, such as the forwarding at an IP router.
d. Click configuration is a simplified version of Python.
e. Click elements can be composed to perform complex network-wide functions, such as shortest paths or BGP routing.
",,c,"c,e",,"a. Click elements can perform common data plane operations like TTL decrement or checksum computations. Therefore, this statement is false. 
b. Click allows for custom data-plane processing by composing different elements, not limited to a fixed set. Hence, this statement is false. 
c. Click elements can indeed be composed to perform complex functions like forwarding at an IP router, making this statement true. 
d. Click configuration is not a simplified version of Python; it uses its own configuration language. Therefore, this statement is false. 
e. Click elements can be composed to perform complex network-wide functions like shortest paths or BGP routing, making this statement true.","['https://dl.acm.org/doi/10.1145/1251086.1251090', 'https://www.usenix.org/legacy/event/usenix04/tech/freenix/full_papers/mckeown/mckeown.pdf']",0,10_programmable_data_planes,0.9,0.9999356024814092,0.6000000000000001
117,Why does a RouteBricks server assign one core per queue?,"a. Having multiple cores accessing the same queue would require each core to perform only one function in the packet processing pipeline, which is inefficient.
b. Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance.
c. Having multiple cores accessing the same queue might create the possibility that there is a queue that is not served by any cores.
d. Cores have heterogeneous performance, and packets are different sizes, so it makes sense to assign less powerful cores to queues that have smaller packets.
",,b,b,,"Having multiple cores accessing the same queue would require locking to prevent concurrent memory accesses, slowing packet forwarding performance. By assigning one core per queue, RouteBricks avoids the need for locking mechanisms, ensuring efficient packet processing without the overhead of managing concurrent memory accesses.",['https://www.usenix.org/legacy/event/nsdi10/tech/full_papers/Agarwal.pdf'],1,10_programmable_data_planes,0.9,0.9999726283256112,1.0
118,What are some tricks commonly employed in software to accelerate packet forwarding? Select all that apply.,"a. Ethernet GRE tunnels
b. Large packet buffers that hold multiple packets that can be read with a single read
c. Forwarding smaller packets before larger packets
d. Avoiding lookups on the software bridge between virtual interfaces and physical interfaces
e. Batch processing
",,"a,b,d,e","b,c,e",,"a. Ethernet GRE tunnels are not typically used to accelerate packet forwarding but rather for encapsulation purposes. They do not directly accelerate forwarding speed. b. Large packet buffers that hold multiple packets for efficient processing are commonly used to accelerate packet forwarding by reducing the number of memory accesses needed. c. Forwarding smaller packets before larger packets is a trick used to reduce latency and improve overall throughput. e. Batch processing, where multiple packets are processed together, helps in optimizing processing efficiency and accelerating packet forwarding. Therefore, options b, c, and e are commonly employed tricks to accelerate packet forwarding.",['https://www.sciencedirect.com/science/article/pii/S1877050919304917'],0,10_programmable_data_planes,0.9,0.6139653282976542,0.0
119,What are some of the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design? Select all that apply.,"a. Current hardware makes it difficult to implement multiple match action stages, and to repurpose TCAM and SRAM across multiple match-action stages.
b. Current hardware cannot forward traffic at line rates.
c. The current OpenFlow protocol depends on the constraints of conventional switching chips.
d. Current hardware cannot support OpenFlow 1.0 match-action primitives.
e. Current hardware is difficult to repurpose in the field.
",,"a,c,e","a,c",,"a. Current hardware limitations make it challenging to implement multiple match action stages and repurpose TCAM and SRAM across them, motivating custom chip designs to address this issue. This is a problem that custom OpenFlow chip designs aim to solve. c. The current OpenFlow protocol is constrained by conventional switching chips, leading to the need for custom OpenFlow chip designs to overcome these limitations. Therefore, options a and c are the problems with current OpenFlow hardware that motivated a custom OpenFlow chip design.","['https://ieeexplore.ieee.org/document/6195809', 'https://www.sciencedirect.com/science/article/pii/S014036641730116X']",0,10_programmable_data_planes,0.95,0.7032465567010463,0.6000000000000001
120,"Which of the following are motivations for SwitchBlade, which supports composition of pre-synthesized hardware data plane modules on an FPGA? Select all that apply.","a. Most data plane protocols involve composing only a limited number of data-plane actions.
b. Experimental data planes may need to operate in parallel with production data planes.
c. Programming in Verilog is difficult.
d. FPGAs are lower-cost and consume less power than conventional ASICs or OpenFlow switching chips.
e. Programming in C is difficult.
",,"a,b,c","a,b",,"a. SwitchBlade aims to support the composition of pre-synthesized hardware data plane modules for data-plane actions, which are limited in most data plane protocols. This is a motivation for using SwitchBlade. b. Experimental data planes may indeed need to operate concurrently with production data planes, which is a motivation for SwitchBlade. c. The difficulty of programming in Verilog is not a motivation for SwitchBlade. d. The cost and power consumption comparison with ASICs or OpenFlow switching chips is not a motivation mentioned for SwitchBlade. e. The difficulty of programming in C is not a motivation for SwitchBlade.",['https://dl.acm.org/doi/10.1145/3371934.3371963'],0,10_programmable_data_planes,0.9,0.996253522743949,0.6000000000000001
