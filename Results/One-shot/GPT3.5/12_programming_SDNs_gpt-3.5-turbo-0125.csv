Question Number,Question Text,Choices,Valid Question?,Correct Answer,LLM Answer,Correct Explanation,LLM Explanation,URLs,Correct?,Topic,LLM Confidence,logprob Confidence
87,Which of the following reasons make programming OpenFlow switches difficult? Select all that apply.,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle.
b. OpenFlow networks require a single, centralized network controller.
c. Networks often have switches from multiple hardware vendors.
d. OpenFlow switches control switches at a low level of abstraction.
e. Network policies involve many independent tasks that may have conflicting behaviors.
",,"a,d,e","a,c,d,e",,"a. An OpenFlow controller only sees events for packets that the switches do not know how to handle, making it difficult to have full visibility and control over all network traffic. This limitation adds complexity to programming OpenFlow switches. c. Networks often have switches from multiple hardware vendors, leading to interoperability challenges and making it harder to program OpenFlow switches uniformly across different devices. d. OpenFlow switches control switches at a low level of abstraction, which can complicate the programming process due to the detailed control required. e. Network policies involve many independent tasks that may have conflicting behaviors, making it challenging to program OpenFlow switches to enforce these policies seamlessly.","['https://www.sciencedirect.com/science/article/pii/S2352864816300209', 'https://ieeexplore.ieee.org/document/7434277']",0,12_programming_SDNs,1,0.9510288680340285
89,"Suppose that a network operator wants to express a policy that drops all traffic except for traffic from a specific IP prefix (i.e., group of IP addresses).  What problems exist with expressing this policy as a set of OpenFlow rules? Select all that apply.","a. Switches have limited room for flow table entries and cannot store rules for all IP addresses in a prefix by default.
b. The controller may see more than the first packet for a flow that it has already installed.
c. If the controller installs the rules in the wrong order, all traffic might be dropped, instead of allowing the permitted traffic.
d. If the operator starts adding more IP addresses that are permitted to send traffic, performance of the switch might suffer as the number of entries in the switch table grows.
e. Flow table entries can only perform exact matches on IP addresses, so installing rules that operate on groups of IP addresses will take many flow-table entries in the switch.
",,"a,b,c,d","a,d,e",,"a. Switches have limited space in their flow tables, making it impossible to store rules for all IP addresses in a prefix. This limitation can lead to dropping packets that should be allowed under the policy. 
 d. As the number of permitted IP addresses grows, the size of the flow table in the switch will increase, potentially impacting the switch's performance. This scalability issue can affect the switch's ability to handle a large number of rules. 
 e. OpenFlow flow table entries can only perform exact matches on IP addresses, meaning that expressing policies based on IP address groups will require multiple flow table entries, consuming more resources and increasing complexity.","['https://www.sciencedirect.com/science/article/pii/S2352864820301539', 'https://learning.oreilly.com/library/view/programming-opensdks/9781492042022/ch04.html']",0,12_programming_SDNs,0.95,0.8080829297633576
90,Which of the following have examples of sequential composition? Select all that apply.,"a. Block all port 80 traffic and count the number of packets that are blocked.
b. Load balance traffic based on whether the traffic matches a particular destination IP prefix.
c. Block all traffic except port 80 and count the number of packets that are blocked.
d. Block all traffic except port 80 traffic, and load balance port 80 traffic across three destination IP addresses.
e. Block all traffic except port 80 and count the number of packets that are not blocked.
",,"b,d,e","c,e",,"Sequential composition refers to the execution of multiple operations in a sequence where the output of one operation feeds into the input of the next operation. In this context, options c and e involve a sequence of operations where the first operation is to block certain traffic, and the second operation is to count the number of packets affected by the block. This sequential nature is evident in these scenarios.",[],0,12_programming_SDNs,0.9,0.36726221784984336
91,Which of the following have examples of parallel composition? Select all that apply.,"a. Perform load balancing on any traffic that arrives from prefix 130.207.0.0/16 or is destined to port 80.
b. Perform MAC learning on all traffic that is not blocked by a firewall rule.
c. Count all port 80 traffic.
d. Block all traffic whose source IP address is contained in a list of blocked IP addresses.
e. Load balance traffic across multiple destination IP addresses and perform routing to the resulting destination IP addresses.
",,"a,c,d","a,e",,a. Performing load balancing on traffic from a specific prefix or destined to a specific port involves parallel composition as the load balancing operation can be done independently for each condition mentioned in parallel. This is an example of parallel composition. e. Load balancing traffic across multiple destination IP addresses and performing routing to these destinations is another example of parallel composition where the load balancing and routing tasks can be done concurrently for different IP addresses. This scenario demonstrates parallel composition.,[],0,12_programming_SDNs,0.9,0.9224378228902103
92,Which of the following is the appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4?,"a. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
b. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) + mod(dstip=1.2.3.4)
c. (match(srcip=10.0.0.1) + match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
d. (match(srcip=10.0.0.1) >> (match(srcip=10.0.0.2) >> mod(dstip=1.2.3.4))
e. (match(srcip=10.0.0.1) >> match(srcip=10.0.0.2)) >> mod(dstip=1.2.3.4)
",,c,c,,The appropriate Pyretic rule for matching traffic that sends packets from either 10.0.0.1 or 10.0.0.2 to IP address 1.2.3.4 is to use 'match' for both source IP addresses and then use '>>' to apply the modification of the destination IP address. Option c achieves this by matching both source IP addresses and then modifying the destination IP address.,['https://github.com/frenetic-lang/pyretic/wiki/Tutorial#querying-and-modifying-packet-headers'],1,12_programming_SDNs,1,0.9999578475844381
93,Which of the following is the appropiate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4?,"a. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2)  + mod(dstip=10.2.3.4))
b. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) + (match(srcip=10.0.0.2) >> mod(dstip=10.2.3.4))
c. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) >>mod(dstip=10.2.3.4))
d. (match(srcip=10.0.0.1) + mod(dstip=10.1.2.3)) >> (match(srcip=10.0.0.2) + mod(dstip=10.2.3.4))
e. (match(srcip=10.0.0.1) >> mod(dstip=10.1.2.3)) & (match(srcip=10.0.0.2)  >> mod(dstip=10.2.3.4))
",,b,a,,The appropriate Pyretic rule for sending traffic from source IP address 10.0.0.1 to destination IP address 10.1.2.3 and traffic from source IP address 10.0.0.2 to destination IP address 10.2.3.4 should be a combination of match and mod actions for each pair of IP addresses. Option 'a' correctly combines the match and mod actions for both pairs of IP addresses.,[],0,12_programming_SDNs,1,0.5558941947792383
94,Which of the following might be examples that would use a dynamic policy in Pyretic? Select all that apply.,"a. Check each new traffic flow against a list of permitted and prohibited source IP addresses that may change over time.
b. Drop all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
c. Assign each new traffic flow to a different destination IP address based on a round-robin load balancing policy across servers.
d. Count all traffic arriving from source IP addresses in prefix 10.0.0.0/8.
e. Forward traffic through the network based on shortest paths routing, re-routing traffic appropriately when links or nodes fail.
",,"a,c,e","a,c",,"a. Checking traffic against a list of permitted and prohibited source IP addresses that may change over time requires a dynamic policy to adapt to the changes in the list over time. This is an example of a dynamic policy in Pyretic. 
c. Assigning each new traffic flow to a different destination IP address based on round-robin load balancing policy across servers involves dynamically changing the destination IP addresses based on the load balancing policy. This is another example of using a dynamic policy in Pyretic.",['https://dl.acm.org/doi/10.1145/2208917.2208939'],0,12_programming_SDNs,0.9,0.9976036387788835
